<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="structsigned__int" kind="struct" language="C++" prot="public">
    <compoundname>signed_int</compoundname>
    <includes refid="varint_8hpp" local="no">varint.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structsigned__int_aa943a3c55006fb2cc4e88afd6edc1755_1aa943a3c55006fb2cc4e88afd6edc1755" prot="public" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t signed_int::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
<para>Contained value. </para>        </briefdescription>
        <detaileddescription>
<para>Contained value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="300" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsigned__int_aeb8e4505fb74ac10c901ef905ff82d2e_1aeb8e4505fb74ac10c901ef905ff82d2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>signed_int::signed_int</definition>
        <argsstring>(int32_t v=0)</argsstring>
        <name>signed_int</name>
        <param>
          <type>int32_t</type>
          <declname>v</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct a new signed int object. </para>        </briefdescription>
        <detaileddescription>
<para>Construct a new signed int object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- Source </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="257" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="structsigned__int_afe5db7c1297bb56cc454fe413959c07c_1afe5db7c1297bb56cc454fe413959c07c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>signed_int::operator int32_t</definition>
        <argsstring>() const</argsstring>
        <name>operator int32_t</name>
        <briefdescription>
<para>Conversion operator. </para>        </briefdescription>
        <detaileddescription>
<para>Convert <ref refid="structsigned__int" kindref="compound">signed_int</ref> to primitive 32-bit signed integer <simplesect kind="return"><para>int32_t - The converted result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="265" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="structsigned__int_a94d683e2056158e266f64ac0cd60ecaf_1a94d683e2056158e266f64ac0cd60ecaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
        <definition>signed_int&amp; signed_int::operator=</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>operator=</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para>Assign an object that is convertible to int32_t</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the assignment object </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- Source </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structunsigned__int" kindref="compound">unsigned_int</ref>&amp; - Reference to this object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="277" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="structsigned__int_a21a8dab0e714a1bac2cbd91810ac6a77_1a21a8dab0e714a1bac2cbd91810ac6a77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsigned__int" kindref="compound">signed_int</ref></type>
        <definition>signed_int signed_int::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Increment operator. </para>        </briefdescription>
        <detaileddescription>
<para>Increment operator</para><para><simplesect kind="return"><para><ref refid="structsigned__int" kindref="compound">signed_int</ref> - New <ref refid="structsigned__int" kindref="compound">signed_int</ref> with value incremented from the current object&apos;s value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="285" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="285" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="structsigned__int_a364a6dedb3372b0c318d0954ba0909d3_1a364a6dedb3372b0c318d0954ba0909d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
        <definition>signed_int&amp; signed_int::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Increment operator. </para>        </briefdescription>
        <detaileddescription>
<para>Increment operator</para><para><simplesect kind="return"><para><ref refid="structsigned__int" kindref="compound">signed_int</ref> - Reference to current object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="293" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="293" bodyend="293"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structsigned__int_a7e5690c7ad2505e2297e0e536a3ad740_1a7e5690c7ad2505e2297e0e536a3ad740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const signed_int &amp;i, const int32_t &amp;v)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Equality Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check equality between a <ref refid="structsigned__int" kindref="compound">signed_int</ref> object and 32-bit integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- 32-bit integer to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if equal </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="311" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="311" bodyend="311"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_aec106017391627bd0e273592c18a0eb5_1aec106017391627bd0e273592c18a0eb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const int32_t &amp;i, const signed_int &amp;v)</argsstring>
        <name>operator==</name>
        <param>
          <type>const int32_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Equality Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check equality between 32-bit integer and a <ref refid="structsigned__int" kindref="compound">signed_int</ref> object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- 32-bit integer to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if equal </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="322" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_a5612a3dbcbfd3d1fa335aa402c29ac35_1a5612a3dbcbfd3d1fa335aa402c29ac35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const signed_int &amp;i, const signed_int &amp;v)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Equality Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check equality between two <ref refid="structsigned__int" kindref="compound">signed_int</ref> objects</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if equal </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="333" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="333" bodyend="333"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_a3ee2f31815a95ec9ffd2ab7a7f02d524_1a3ee2f31815a95ec9ffd2ab7a7f02d524" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const signed_int &amp;i, const int32_t &amp;v)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Inequality Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check inequality between a <ref refid="structsigned__int" kindref="compound">signed_int</ref> object and 32-bit integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- 32-bit integer to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if inequal </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="345" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="345" bodyend="345"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_a6abfcdc55171168e5679ccd9f37ba471_1a6abfcdc55171168e5679ccd9f37ba471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const int32_t &amp;i, const signed_int &amp;v)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const int32_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Equality Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check inequality between 32-bit integer and a <ref refid="structsigned__int" kindref="compound">signed_int</ref> object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- 32-bit integer to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if unequal </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="356" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_a6e25feb014836d0288a262e5d488533c_1a6e25feb014836d0288a262e5d488533c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const signed_int &amp;i, const signed_int &amp;v)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Inequality Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check inequality between two <ref refid="structsigned__int" kindref="compound">signed_int</ref> objects</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if inequal </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="367" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="367" bodyend="367"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_adbae5ebcac1cb6ed6a7547a427c7cf95_1adbae5ebcac1cb6ed6a7547a427c7cf95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const signed_int &amp;i, const int32_t &amp;v)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Less than Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check if the given <ref refid="structsigned__int" kindref="compound">signed_int</ref> object is less than the given 32-bit integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- 32-bit integer to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if i less than v </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="378" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="378" bodyend="378"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_ae0ebf886eb4f8bd58f41626bfc2d88b7_1ae0ebf886eb4f8bd58f41626bfc2d88b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const int32_t &amp;i, const signed_int &amp;v)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const int32_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Less than Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check if the given 32-bit integer is less than the given <ref refid="structsigned__int" kindref="compound">signed_int</ref> object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- 32-bit integer to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if i less than v </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="389" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="389" bodyend="389"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_ac2eea5a817b5774997100c0cdb8c81d2_1ac2eea5a817b5774997100c0cdb8c81d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const signed_int &amp;i, const signed_int &amp;v)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Less than Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check if the first given <ref refid="structsigned__int" kindref="compound">signed_int</ref> is less than the second given <ref refid="structsigned__int" kindref="compound">signed_int</ref> object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if i less than v </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="400" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="400" bodyend="400"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_a0b7eb30fe9fdbc1f375309719ad8248c_1a0b7eb30fe9fdbc1f375309719ad8248c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const signed_int &amp;i, const int32_t &amp;v)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Greater or Equal to Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check if the given <ref refid="structsigned__int" kindref="compound">signed_int</ref> object is greater or equal to the given 32-bit integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- 32-bit integer to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if i is greater or equal to v </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="412" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="412" bodyend="412"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_accb4bcf54dbdec11cdcbd06167d677c9_1accb4bcf54dbdec11cdcbd06167d677c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const int32_t &amp;i, const signed_int &amp;v)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const int32_t &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Greater or Equal to Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check if the given 32-bit integer is greater or equal to the given <ref refid="structsigned__int" kindref="compound">signed_int</ref> object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- 32-bit integer to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if i is greater or equal to v </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="423" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="423" bodyend="423"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_ab249950f493a3623cf845633e07df502_1ab249950f493a3623cf845633e07df502" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&gt;=</definition>
        <argsstring>(const signed_int &amp;i, const signed_int &amp;v)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Greater or Equal to Operator. </para>        </briefdescription>
        <detaileddescription>
<para>Check if the first given <ref refid="structsigned__int" kindref="compound">signed_int</ref> is greater or equal to the second given <ref refid="structsigned__int" kindref="compound">signed_int</ref> object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="structsigned__int" kindref="compound">signed_int</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true - if i is greater or equal to v </para></simplesect>
<simplesect kind="return"><para>false - otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="434" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_afabc024d2020505d135d9efbcf9e16a8_1afabc024d2020505d135d9efbcf9e16a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>friend DataStream &amp;</type>
        <definition>DataStream&amp; operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const signed_int &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize an <ref refid="structsigned__int" kindref="compound">signed_int</ref> object with as few bytes as possible. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize an <ref refid="structsigned__int" kindref="compound">signed_int</ref> object with as few bytes as possible</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="447" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="447" bodyend="456"/>
      </memberdef>
      <memberdef kind="friend" id="structsigned__int_a7eef08b0d7662636e1b0fa0f90bc8ccd_1a7eef08b0d7662636e1b0fa0f90bc8ccd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>friend DataStream &amp;</type>
        <definition>DataStream&amp; operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, signed_int &amp;vi)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="structsigned__int" kindref="compound">signed_int</ref> &amp;</type>
          <declname>vi</declname>
        </param>
        <briefdescription>
<para>Deserialize an <ref refid="structsigned__int" kindref="compound">signed_int</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize an <ref refid="structsigned__int" kindref="compound">signed_int</ref> object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vi</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/varint.hpp" line="468" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="468" bodyend="479"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Variable Length Signed Integer. </para>    </briefdescription>
    <detaileddescription>
<para>Variable Length Signed Integer. This provides more efficient serialization of 32-bit signed int. It serializes a 32-bit signed integer in as few bytes as possible. <lsquo/>varint32<rsquo/> is signed and uses <ulink url="https://developers.google.com/protocol-buffers/docs/encoding#signed-integers">Zig-Zag encoding</ulink> </para>    </detaileddescription>
    <location file="libraries/eosiolib/varint.hpp" line="250" column="1" bodyfile="libraries/eosiolib/varint.hpp" bodystart="250" bodyend="480"/>
    <listofallmembers>
      <member refid="structsigned__int_afe5db7c1297bb56cc454fe413959c07c_1afe5db7c1297bb56cc454fe413959c07c" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator int32_t</name></member>
      <member refid="structsigned__int_a3ee2f31815a95ec9ffd2ab7a7f02d524_1a3ee2f31815a95ec9ffd2ab7a7f02d524" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator!=</name></member>
      <member refid="structsigned__int_a6abfcdc55171168e5679ccd9f37ba471_1a6abfcdc55171168e5679ccd9f37ba471" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator!=</name></member>
      <member refid="structsigned__int_a6e25feb014836d0288a262e5d488533c_1a6e25feb014836d0288a262e5d488533c" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator!=</name></member>
      <member refid="structsigned__int_a21a8dab0e714a1bac2cbd91810ac6a77_1a21a8dab0e714a1bac2cbd91810ac6a77" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator++</name></member>
      <member refid="structsigned__int_a364a6dedb3372b0c318d0954ba0909d3_1a364a6dedb3372b0c318d0954ba0909d3" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator++</name></member>
      <member refid="structsigned__int_adbae5ebcac1cb6ed6a7547a427c7cf95_1adbae5ebcac1cb6ed6a7547a427c7cf95" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator&lt;</name></member>
      <member refid="structsigned__int_ae0ebf886eb4f8bd58f41626bfc2d88b7_1ae0ebf886eb4f8bd58f41626bfc2d88b7" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator&lt;</name></member>
      <member refid="structsigned__int_ac2eea5a817b5774997100c0cdb8c81d2_1ac2eea5a817b5774997100c0cdb8c81d2" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator&lt;</name></member>
      <member refid="structsigned__int_afabc024d2020505d135d9efbcf9e16a8_1afabc024d2020505d135d9efbcf9e16a8" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator&lt;&lt;</name></member>
      <member refid="structsigned__int_a94d683e2056158e266f64ac0cd60ecaf_1a94d683e2056158e266f64ac0cd60ecaf" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator=</name></member>
      <member refid="structsigned__int_a7e5690c7ad2505e2297e0e536a3ad740_1a7e5690c7ad2505e2297e0e536a3ad740" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator==</name></member>
      <member refid="structsigned__int_aec106017391627bd0e273592c18a0eb5_1aec106017391627bd0e273592c18a0eb5" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator==</name></member>
      <member refid="structsigned__int_a5612a3dbcbfd3d1fa335aa402c29ac35_1a5612a3dbcbfd3d1fa335aa402c29ac35" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator==</name></member>
      <member refid="structsigned__int_a0b7eb30fe9fdbc1f375309719ad8248c_1a0b7eb30fe9fdbc1f375309719ad8248c" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator&gt;=</name></member>
      <member refid="structsigned__int_accb4bcf54dbdec11cdcbd06167d677c9_1accb4bcf54dbdec11cdcbd06167d677c9" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator&gt;=</name></member>
      <member refid="structsigned__int_ab249950f493a3623cf845633e07df502_1ab249950f493a3623cf845633e07df502" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator&gt;=</name></member>
      <member refid="structsigned__int_a7eef08b0d7662636e1b0fa0f90bc8ccd_1a7eef08b0d7662636e1b0fa0f90bc8ccd" prot="public" virt="non-virtual"><scope>signed_int</scope><name>operator&gt;&gt;</name></member>
      <member refid="structsigned__int_aeb8e4505fb74ac10c901ef905ff82d2e_1aeb8e4505fb74ac10c901ef905ff82d2e" prot="public" virt="non-virtual"><scope>signed_int</scope><name>signed_int</name></member>
      <member refid="structsigned__int_aa943a3c55006fb2cc4e88afd6edc1755_1aa943a3c55006fb2cc4e88afd6edc1755" prot="public" virt="non-virtual"><scope>signed_int</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
