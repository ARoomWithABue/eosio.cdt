<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classeosio_1_1extended__symbol" kind="class" language="C++" prot="public">
    <compoundname>eosio::extended_symbol</compoundname>
    <includes refid="symbol_8hpp" local="no">symbol.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classeosio_1_1extended__symbol_1a07141fb78b807c3a2619e252127bda01" prot="private" static="no" mutable="no">
        <type><ref refid="classeosio_1_1symbol" kindref="compound">symbol</ref></type>
        <definition>symbol eosio::extended_symbol::symbol</definition>
        <argsstring></argsstring>
        <name>symbol</name>
        <briefdescription>
<para>the symbol </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="303" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeosio_1_1extended__symbol_1a3220dd8dc50717bbf20dbd8297a5cc08" prot="private" static="no" mutable="no">
        <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
        <definition>name eosio::extended_symbol::contract</definition>
        <argsstring></argsstring>
        <name>contract</name>
        <briefdescription>
<para>the token contract hosting the symbol </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="304" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="304" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classeosio_1_1extended__symbol_a56dc99d1a5b4a6edb9366d2b3f64b4f7_1a56dc99d1a5b4a6edb9366d2b3f64b4f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr eosio::extended_symbol::extended_symbol</definition>
        <argsstring>()</argsstring>
        <name>extended_symbol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="254" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1extended__symbol_a53adc0870f45a4a6e70fd223f046f201_1a53adc0870f45a4a6e70fd223f046f201" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr eosio::extended_symbol::extended_symbol</definition>
        <argsstring>(symbol sym, name con)</argsstring>
        <name>extended_symbol</name>
        <param>
          <type><ref refid="classeosio_1_1symbol" kindref="compound">symbol</ref></type>
          <declname>sym</declname>
        </param>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>con</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="256" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1extended__symbol_a81b0741a1705ad99855aa375fe004b9d_1a81b0741a1705ad99855aa375fe004b9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="classeosio_1_1symbol" kindref="compound">symbol</ref></type>
        <definition>constexpr symbol eosio::extended_symbol::get_symbol</definition>
        <argsstring>() const</argsstring>
        <name>get_symbol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="258" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1extended__symbol_aa215d71db628ab457c8eff30912eae82_1aa215d71db628ab457c8eff30912eae82" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr <ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
        <definition>constexpr name eosio::extended_symbol::get_contract</definition>
        <argsstring>() const</argsstring>
        <name>get_contract</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="260" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1extended__symbol_a2b1d5fafb307b27aab4274560a09866e_1a2b1d5fafb307b27aab4274560a09866e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::extended_symbol::print</definition>
        <argsstring>(bool show_precision=true) const</argsstring>
        <name>print</name>
        <param>
          <type>bool</type>
          <declname>show_precision</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Print the extended symbol </para>        </briefdescription>
        <detaileddescription>
<para>Print the extended symbol </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="267" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="267" bodyend="271"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classeosio_1_1extended__symbol_ad306b3eaac29fba58441578b179398bc_1ad306b3eaac29fba58441578b179398bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(const extended_symbol &amp;a, const extended_symbol &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classeosio_1_1extended__symbol" kindref="compound">extended_symbol</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1extended__symbol" kindref="compound">extended_symbol</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Equivalency operator. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalency operator. Returns true if a == b (are the same)</para><para><simplesect kind="return"><para>boolean - true if both provided extended_symbols are the same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="279" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="279" bodyend="281"/>
      </memberdef>
      <memberdef kind="friend" id="classeosio_1_1extended__symbol_aafb631b64d0586016ca8ea499350820d_1aafb631b64d0586016ca8ea499350820d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(const extended_symbol &amp;a, const extended_symbol &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classeosio_1_1extended__symbol" kindref="compound">extended_symbol</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1extended__symbol" kindref="compound">extended_symbol</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Inverted equivalency operator. </para>        </briefdescription>
        <detaileddescription>
<para>Inverted equivalency operator. Returns true if a != b (are different)</para><para><simplesect kind="return"><para>boolean - true if both provided extended_symbols are not the same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="289" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="289" bodyend="291"/>
      </memberdef>
      <memberdef kind="friend" id="classeosio_1_1extended__symbol_afeaa211627f6df2a4f4f31aefedc6077_1afeaa211627f6df2a4f4f31aefedc6077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator&lt;</definition>
        <argsstring>(const extended_symbol &amp;a, const extended_symbol &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classeosio_1_1extended__symbol" kindref="compound">extended_symbol</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1extended__symbol" kindref="compound">extended_symbol</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Less than operator. </para>        </briefdescription>
        <detaileddescription>
<para>Less than operator. Returns true if a &lt; b. <simplesect kind="return"><para>boolean - true if <ref refid="classeosio_1_1extended__symbol" kindref="compound">extended_symbol</ref> <computeroutput>a</computeroutput> is less than <computeroutput>b</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="298" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="298" bodyend="300"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/eosiolib/symbol.hpp" line="252" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="251" bodyend="307"/>
    <listofallmembers>
      <member refid="classeosio_1_1extended__symbol_1a3220dd8dc50717bbf20dbd8297a5cc08" prot="private" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>contract</name></member>
      <member refid="classeosio_1_1extended__symbol_a56dc99d1a5b4a6edb9366d2b3f64b4f7_1a56dc99d1a5b4a6edb9366d2b3f64b4f7" prot="public" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>extended_symbol</name></member>
      <member refid="classeosio_1_1extended__symbol_a53adc0870f45a4a6e70fd223f046f201_1a53adc0870f45a4a6e70fd223f046f201" prot="public" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>extended_symbol</name></member>
      <member refid="classeosio_1_1extended__symbol_aa215d71db628ab457c8eff30912eae82_1aa215d71db628ab457c8eff30912eae82" prot="public" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>get_contract</name></member>
      <member refid="classeosio_1_1extended__symbol_a81b0741a1705ad99855aa375fe004b9d_1a81b0741a1705ad99855aa375fe004b9d" prot="public" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>get_symbol</name></member>
      <member refid="classeosio_1_1extended__symbol_aafb631b64d0586016ca8ea499350820d_1aafb631b64d0586016ca8ea499350820d" prot="public" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>operator!=</name></member>
      <member refid="classeosio_1_1extended__symbol_afeaa211627f6df2a4f4f31aefedc6077_1afeaa211627f6df2a4f4f31aefedc6077" prot="public" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>operator&lt;</name></member>
      <member refid="classeosio_1_1extended__symbol_ad306b3eaac29fba58441578b179398bc_1ad306b3eaac29fba58441578b179398bc" prot="public" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>operator==</name></member>
      <member refid="classeosio_1_1extended__symbol_a2b1d5fafb307b27aab4274560a09866e_1a2b1d5fafb307b27aab4274560a09866e" prot="public" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>print</name></member>
      <member refid="classeosio_1_1extended__symbol_1a07141fb78b807c3a2619e252127bda01" prot="private" virt="non-virtual"><scope>eosio::extended_symbol</scope><name>symbol</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
