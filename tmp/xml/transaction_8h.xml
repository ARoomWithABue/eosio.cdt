<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="transaction_8h" kind="file" language="C++">
    <compoundname>transaction.h</compoundname>
    <includes refid="types_8h" local="no">eosiolib/types.h</includes>
    <includedby refid="transaction_8hpp" local="no">libraries/eosiolib/transaction.hpp</includedby>
    <incdepgraph>
      <node id="623">
        <label>stdint.h</label>
      </node>
      <node id="622">
        <label>eosiolib/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
      </node>
      <node id="624">
        <label>wchar.h</label>
      </node>
      <node id="621">
        <label>libraries/eosiolib/transaction.h</label>
        <link refid="transaction_8h"/>
        <childnode refid="622" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="627">
        <label>libraries/eosiolib/permission.hpp</label>
        <link refid="permission_8hpp"/>
      </node>
      <node id="626">
        <label>libraries/eosiolib/transaction.hpp</label>
        <link refid="transaction_8hpp"/>
        <childnode refid="627" relation="include">
        </childnode>
      </node>
      <node id="625">
        <label>libraries/eosiolib/transaction.h</label>
        <link refid="transaction_8h"/>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__transaction__c_ga07e6ca6c01d86389ee6a09bbc79d5771_1ga07e6ca6c01d86389ee6a09bbc79d5771" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void send_deferred</definition>
        <argsstring>(const uint128_t &amp;sender_id, capi_name payer, const char *serialized_transaction, size_t size, uint32_t replace_existing=0)</argsstring>
        <name>send_deferred</name>
        <param>
          <type>const uint128_t &amp;</type>
          <declname>sender_id</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>serialized_transaction</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>replace_existing</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sends a deferred transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Sends a deferred transaction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sender_id</parametername>
</parameternamelist>
<parameterdescription>
<para>- ID of sender </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- Account paying for RAM </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serialized_transaction</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer of serialized transaction to be deferred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size to reserve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>replace_existing</parametername>
</parameternamelist>
<parameterdescription>
<para>- f this is <computeroutput>0</computeroutput> then if the provided sender_id is already in use by an in-flight transaction from this contract, which will be a failing assert. If <computeroutput>1</computeroutput> then transaction will atomically cancel/replace the inflight transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction__c_ga03df5ed306c904081f03601350a81b67_1ga03df5ed306c904081f03601350a81b67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cancel_deferred</definition>
        <argsstring>(const uint128_t &amp;sender_id)</argsstring>
        <name>cancel_deferred</name>
        <param>
          <type>const uint128_t &amp;</type>
          <declname>sender_id</declname>
        </param>
        <briefdescription>
<para>Cancels a deferred transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Cancels a deferred transaction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sender_id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The id of the sender</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>The deferred transaction ID exists. </para></simplesect>
<simplesect kind="pre"><para>The deferred transaction ID has not yet been published. </para></simplesect>
<simplesect kind="post"><para>Deferred transaction canceled.</para></simplesect>
<simplesect kind="return"><para>1 if transaction was canceled, 0 if transaction was not found</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">id<sp/>=<sp/>0xffffffffffffffff</highlight></codeline>
<codeline><highlight class="normal">cancel_deferred(<sp/>id<sp/>);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction__c_ga73fa4253ae0aec55399c26b740223bc6_1ga73fa4253ae0aec55399c26b740223bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t read_transaction</definition>
        <argsstring>(char *buffer, size_t size)</argsstring>
        <name>read_transaction</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Access a copy of the currently executing transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Access a copy of the currently executing transaction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- a buffer to write the current transaction to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- the size of the buffer, 0 to return required size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the transaction written to the buffer, or number of bytes that can be copied if size==0 passed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction__c_gadfcd2e00f00461eac891ee8433508609_1gadfcd2e00f00461eac891ee8433508609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t transaction_size</definition>
        <argsstring>()</argsstring>
        <name>transaction_size</name>
        <briefdescription>
<para>Gets the size of the currently executing transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Gets the size of the currently executing transaction.</para><para><simplesect kind="return"><para>size of the currently executing transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction__c_gac0b858a766ca73c6415bdb799d6ef45a_1gac0b858a766ca73c6415bdb799d6ef45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tapos_block_num</definition>
        <argsstring>()</argsstring>
        <name>tapos_block_num</name>
        <briefdescription>
<para>Gets the block number used for TAPOS on the currently executing transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Gets the block number used for TAPOS on the currently executing transaction.</para><para><simplesect kind="return"><para>block number used for TAPOS on the currently executing transaction Example: <programlisting><codeline><highlight class="normal">int<sp/>tbn<sp/>=<sp/>tapos_block_num();</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction__c_gaef5458ccfe8ca5d6b273e35d04c56371_1gaef5458ccfe8ca5d6b273e35d04c56371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tapos_block_prefix</definition>
        <argsstring>()</argsstring>
        <name>tapos_block_prefix</name>
        <briefdescription>
<para>Gets the block prefix used for TAPOS on the currently executing transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Gets the block prefix used for TAPOS on the currently executing transaction.</para><para><simplesect kind="return"><para>block prefix used for TAPOS on the currently executing transaction Example: <programlisting><codeline><highlight class="normal">int<sp/>tbp<sp/>=<sp/>tapos_block_prefix();</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction__c_ga3843de6e5838982eb47c3806cfd0739a_1ga3843de6e5838982eb47c3806cfd0739a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t expiration</definition>
        <argsstring>()</argsstring>
        <name>expiration</name>
        <briefdescription>
<para>Gets the expiration of the currently executing transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Gets the expiration of the currently executing transaction.</para><para><simplesect kind="return"><para>expiration of the currently executing transaction in seconds since Unix epoch Example: <programlisting><codeline><highlight class="normal">uint32_t<sp/>tm<sp/>=<sp/>expiration();</highlight></codeline>
<codeline><highlight class="normal">eosio_print(tm);</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction__c_gaf1fe78f3caf24010302e5cac1edad61d_1gaf1fe78f3caf24010302e5cac1edad61d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_action</definition>
        <argsstring>(uint32_t type, uint32_t index, char *buff, size_t size)</argsstring>
        <name>get_action</name>
        <param>
          <type>uint32_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Retrieves the indicated action from the active transaction. </para>        </briefdescription>
        <detaileddescription>
<para>Retrieves the indicated action from the active transaction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>- 0 for context free action, 1 for action </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- the index of the requested action </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>- output packed buff of the action </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- amount of buff read, pass 0 to have size returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the action, -1 on failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction__c_gad0f4f1bd76077b3ee4289aadfb84c2b2_1gad0f4f1bd76077b3ee4289aadfb84c2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_context_free_data</definition>
        <argsstring>(uint32_t index, char *buff, size_t size)</argsstring>
        <name>get_context_free_data</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buff</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Retrieve the signed_transaction.context_free_data[index]. </para>        </briefdescription>
        <detaileddescription>
<para>Retrieve the signed_transaction.context_free_data[index].</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- the index of the context_free_data entry to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buff</parametername>
</parameternamelist>
<parameterdescription>
<para>- output buff of the context_free_data entry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>- amount of context_free_data[index] to retrieve into buff, 0 to report required size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size copied, or context_free_data[index].size() if 0 passed for size, or -1 if index not valid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.h" line="146" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>defined in eos/LICENSE.txt </para></simplesect>
</para>    </detaileddescription>
    <location file="libraries/eosiolib/transaction.h"/>
  </compounddef>
</doxygen>
