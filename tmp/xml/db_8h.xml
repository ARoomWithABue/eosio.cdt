<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="db_8h" kind="file" language="C++">
    <compoundname>db.h</compoundname>
    <includes refid="types_8h" local="no">eosiolib/types.h</includes>
    <includedby refid="multi__index_8hpp" local="no">libraries/eosiolib/multi_index.hpp</includedby>
    <incdepgraph>
      <node id="139">
        <label>stdint.h</label>
      </node>
      <node id="138">
        <label>eosiolib/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>wchar.h</label>
      </node>
      <node id="137">
        <label>libraries/eosiolib/db.h</label>
        <link refid="db_8h"/>
        <childnode refid="138" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="146">
        <label>libraries/eosiolib/permission.hpp</label>
        <link refid="permission_8hpp"/>
      </node>
      <node id="142">
        <label>libraries/eosiolib/multi_index.hpp</label>
        <link refid="multi__index_8hpp"/>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>libraries/eosiolib/transaction.hpp</label>
        <link refid="transaction_8hpp"/>
        <childnode refid="146" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>libraries/eosiolib/db.h</label>
        <link refid="db_8h"/>
        <childnode refid="142" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>libraries/eosiolib/singleton.hpp</label>
        <link refid="singleton_8hpp"/>
      </node>
      <node id="144">
        <label>libraries/eosiolib/time.hpp</label>
        <link refid="time_8hpp"/>
        <childnode refid="145" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>libraries/eosiolib/eosio.hpp</label>
        <link refid="eosio_8hpp"/>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__database_ga3f259dd4be6adc25d95e897b7724bbc4_1ga3f259dd4be6adc25d95e897b7724bbc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_store_i64</definition>
        <argsstring>(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const void *data, uint32_t len)</argsstring>
        <name>db_store_i64</name>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Store a record in a primary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Store a record in a primary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides (implied to be within the code of the current receiver) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- ID of the entry </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Record to store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>data</computeroutput> is a valid pointer to a range of memory at least <computeroutput>len</computeroutput> bytes long </para></simplesect>
<simplesect kind="pre"><para><computeroutput>*((uint64_t*)data)</computeroutput> stores the primary key </para></simplesect>
<simplesect kind="return"><para>iterator to the newly created table row </para></simplesect>
<simplesect kind="post"><para>a new entry is created in the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gadfdbc05600fee5ea9d0741fa9ba7cc04_1gadfdbc05600fee5ea9d0741fa9ba7cc04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_update_i64</definition>
        <argsstring>(int32_t iterator, capi_name payer, const void *data, uint32_t len)</argsstring>
        <name>db_update_i64</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Update a record in a primary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Update a record in a primary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- Iterator to the table row containing the record to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs (use 0 to continue using current payer) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- New updated record </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>data</computeroutput> is a valid pointer to a range of memory at least <computeroutput>len</computeroutput> bytes long </para></simplesect>
<simplesect kind="pre"><para><computeroutput>*((uint64_t*)data)</computeroutput> stores the primary key </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the record contained in the table row pointed to by <computeroutput>iterator</computeroutput> is replaced with the new updated record </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga3b3d2cb9baaffcca277aceafe15f885f_1ga3b3d2cb9baaffcca277aceafe15f885f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_remove_i64</definition>
        <argsstring>(int32_t iterator)</argsstring>
        <name>db_remove_i64</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Remove a record from a primary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Remove a record from a primary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- Iterator to the table row to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the table row pointed to by <computeroutput>iterator</computeroutput> is removed and the associated storage costs are refunded to the payer</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">int32_t<sp/>itr<sp/>=<sp/>db_find_i64(receiver,<sp/>receiver,<sp/>table1,<sp/>N(alice));</highlight></codeline>
<codeline><highlight class="normal">eosio_assert(itr<sp/>&gt;=<sp/>0,<sp/>&quot;Alice<sp/>cannot<sp/>be<sp/>removed<sp/>since<sp/>she<sp/>was<sp/>already<sp/>not<sp/>found<sp/>in<sp/>the<sp/>table&quot;);</highlight></codeline>
<codeline><highlight class="normal">db_remove_i64(itr);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gae030353968fb545531c5286da8778808_1gae030353968fb545531c5286da8778808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_get_i64</definition>
        <argsstring>(int32_t iterator, const void *data, uint32_t len)</argsstring>
        <name>db_get_i64</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Get a record in a primary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Get a record in a primary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the table row containing the record to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the buffer which will be filled with the retrieved record </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of the data copied into the buffer if <computeroutput>len &gt; 0</computeroutput>, or size of the retrieved record if <computeroutput>len == 0</computeroutput>. </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="pre"><para><computeroutput>data</computeroutput> is a valid pointer to a range of memory at least <computeroutput>len</computeroutput> bytes long </para></simplesect>
<simplesect kind="post"><para><computeroutput>data</computeroutput> will be filled with the retrieved record (truncated to the first <computeroutput>len</computeroutput> bytes if necessary)</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">char<sp/>value[50];</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>len<sp/>=<sp/>db_get_i64(itr,<sp/>value,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">eosio_assert(len<sp/>&lt;=<sp/>50,<sp/>&quot;buffer<sp/>to<sp/>small<sp/>to<sp/>store<sp/>retrieved<sp/>record&quot;);</highlight></codeline>
<codeline><highlight class="normal">db_get_i64(itr,<sp/>value,<sp/>len);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gab8a30f733c6cd6c9111f25adae685899_1gab8a30f733c6cd6c9111f25adae685899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_next_i64</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_next_i64</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row following the referenced table row in a primary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row following the referenced table row in a primary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the next table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row following the referenced table row (or the end iterator of the table if the referenced table row is the last one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row following the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">int32_t<sp/>charlie_itr<sp/>=<sp/>db_find_i64(receiver,<sp/>receiver,<sp/>table1,<sp/>N(charlie));</highlight></codeline>
<codeline><highlight class="normal">//<sp/>expect<sp/>nothing<sp/>after<sp/>charlie</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>prim<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/><sp/>end_itr<sp/>=<sp/>db_next_i64(charlie_itr,<sp/>&amp;prim);</highlight></codeline>
<codeline><highlight class="normal">eosio_assert(end_itr<sp/>&lt;<sp/>-1,<sp/>&quot;Charlie<sp/>was<sp/>not<sp/>the<sp/>last<sp/>entry<sp/>in<sp/>the<sp/>table&quot;);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga2ffe62dd0ab43732ccebc441a2186139_1ga2ffe62dd0ab43732ccebc441a2186139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_previous_i64</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_previous_i64</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row preceding the referenced table row in a primary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row preceding the referenced table row in a primary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the previous table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row preceding the referenced table row assuming one exists (it will return -1 if the referenced table row is the first one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table or it is the end iterator of the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row preceding the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">uint64_t<sp/>prim<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/><sp/>itr_prev<sp/>=<sp/>db_previous_i64(itr,<sp/>&amp;prim);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gaa1f2c0990c948f52c5d9d2b7ace3e9c5_1gaa1f2c0990c948f52c5d9d2b7ace3e9c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_find_i64</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint64_t id)</argsstring>
        <name>db_find_i64</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Find a table row in a primary 64-bit integer index table by primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a primary 64-bit integer index table by primary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key of the table row to look up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row with a primary key equal to <computeroutput>id</computeroutput> or the end iterator of the table if the table row could not be found</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">int<sp/>itr<sp/>=<sp/>db_find_i64(receiver,<sp/>receiver,<sp/>table1,<sp/>N(charlie));</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga817277bc1a591237ac20e2c6a64242a4_1ga817277bc1a591237ac20e2c6a64242a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_lowerbound_i64</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint64_t id)</argsstring>
        <name>db_lowerbound_i64</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Find the table row in a primary 64-bit integer index table that matches the lowerbound condition for a given primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a primary 64-bit integer index table that matches the lowerbound condition for a given primary key The table row that matches the lowerbound condition is the first table row in the table with the lowest primary key that is &gt;= the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key used to determine the lowerbound </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gabca89e9c328d8ee50c35f93c6908cbf0_1gabca89e9c328d8ee50c35f93c6908cbf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_upperbound_i64</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint64_t id)</argsstring>
        <name>db_upperbound_i64</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Find the table row in a primary 64-bit integer index table that matches the upperbound condition for a given primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a primary 64-bit integer index table that matches the upperbound condition for a given primary key The table row that matches the upperbound condition is the first table row in the table with the lowest primary key that is &gt; the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key used to determine the upperbound </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gab755d000538cddee84abbae2ed06f821_1gab755d000538cddee84abbae2ed06f821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_end_i64</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table)</argsstring>
        <name>db_end_i64</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Get an iterator representing just-past-the-end of the last table row of a primary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Get an iterator representing just-past-the-end of the last table row of a primary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>end iterator of the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gaf00f39b0c943e762cd13ae1d73172261_1gaf00f39b0c943e762cd13ae1d73172261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx64_store</definition>
        <argsstring>(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint64_t *secondary)</argsstring>
        <name>db_idx64_store</name>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>secondary</declname>
        </param>
        <briefdescription>
<para>Store an association of a 64-bit integer secondary key to a primary key in a secondary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Store an association of a 64-bit integer secondary key to a primary key in a secondary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides (implied to be within the code of the current receiver) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key to which to associate the secondary key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the secondary key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the newly created table row </para></simplesect>
<simplesect kind="post"><para>new secondary key association between primary key <computeroutput>id</computeroutput> and secondary key <computeroutput>*secondary</computeroutput> is created in the secondary 64-bit integer index table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga118d635a2600ed798478ad829f36abac_1ga118d635a2600ed798478ad829f36abac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx64_update</definition>
        <argsstring>(int32_t iterator, capi_name payer, const uint64_t *secondary)</argsstring>
        <name>db_idx64_update</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>secondary</declname>
        </param>
        <briefdescription>
<para>Update an association for a 64-bit integer secondary key to a primary key in a secondary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Update an association for a 64-bit integer secondary key to a primary key in a secondary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the table row containing the secondary key association to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs (use 0 to continue using current payer) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the <bold>new</bold> secondary key that will replace the existing one of the association </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the secondary key of the table row pointed to by <computeroutput>iterator</computeroutput> is replaced by <computeroutput>*secondary</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gaae117d50bba68c7a1f3b8f8828dc1699_1gaae117d50bba68c7a1f3b8f8828dc1699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx64_remove</definition>
        <argsstring>(int32_t iterator)</argsstring>
        <name>db_idx64_remove</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Remove a table row from a secondary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Remove a table row from a secondary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- Iterator to the table row to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the table row pointed to by <computeroutput>iterator</computeroutput> is removed and the associated storage costs are refunded to the payer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga5fc70218dc661865823e57055801df24_1ga5fc70218dc661865823e57055801df24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx64_next</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx64_next</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row following the referenced table row in a secondary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row following the referenced table row in a secondary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the next table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row following the referenced table row (or the end iterator of the table if the referenced table row is the last one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row following the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga243746a77546a54ce85345a537872cb7_1ga243746a77546a54ce85345a537872cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx64_previous</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx64_previous</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row preceding the referenced table row in a secondary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row preceding the referenced table row in a secondary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the previous table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row preceding the referenced table row assuming one exists (it will return -1 if the referenced table row is the first one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table or it is the end iterator of the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row preceding the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga4dcc0485335856945baebf6b5e246c81_1ga4dcc0485335856945baebf6b5e246c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx64_find_primary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint64_t *secondary, uint64_t primary)</argsstring>
        <name>db_idx64_find_primary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary 64-bit integer index table by primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary 64-bit integer index table by primary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key of the table row to look up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the table row with a primary key equal to <computeroutput>id</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga87ebf49c63616d8f4db298daea4fb1ec_1ga87ebf49c63616d8f4db298daea4fb1ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx64_find_secondary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, const uint64_t *secondary, uint64_t *primary)</argsstring>
        <name>db_idx64_find_secondary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary 64-bit integer index table by secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary 64-bit integer index table by secondary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key used to lookup the table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the first table row with a secondary key equal to <computeroutput>*secondary</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga6a94c6bbb0cc74ca76c6f0fd56c03e2a_1ga6a94c6bbb0cc74ca76c6f0fd56c03e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx64_lowerbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint64_t *secondary, uint64_t *primary)</argsstring>
        <name>db_idx64_lowerbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary 64-bit integer index table that matches the lowerbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary 64-bit integer index table that matches the lowerbound condition for a given secondary key The table row that matches the lowerbound condition is the first table row in the table with the lowest secondary key that is &gt;= the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key first used to determine the lowerbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gacf9f8b130509755bb05cc28b974caca4_1gacf9f8b130509755bb05cc28b974caca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx64_upperbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint64_t *secondary, uint64_t *primary)</argsstring>
        <name>db_idx64_upperbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary 64-bit integer index table that matches the upperbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary 64-bit integer index table that matches the upperbound condition for a given secondary key The table row that matches the upperbound condition is the first table row in the table with the lowest secondary key that is &gt; the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key first used to determine the upperbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga9596d2d4adea77798e08e7f3a5ac7586_1ga9596d2d4adea77798e08e7f3a5ac7586" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx64_end</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table)</argsstring>
        <name>db_idx64_end</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary 64-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary 64-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>end iterator of the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga39cc50eac1593784a3c82a5a54d50d4b_1ga39cc50eac1593784a3c82a5a54d50d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx128_store</definition>
        <argsstring>(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint128_t *secondary)</argsstring>
        <name>db_idx128_store</name>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const uint128_t *</type>
          <declname>secondary</declname>
        </param>
        <briefdescription>
<para>Store an association of a 128-bit integer secondary key to a primary key in a secondary 128-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Store an association of a 128-bit integer secondary key to a primary key in a secondary 128-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides (implied to be within the code of the current receiver) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key to which to associate the secondary key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the secondary key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the newly created table row </para></simplesect>
<simplesect kind="post"><para>new secondary key association between primary key <computeroutput>id</computeroutput> and secondary key <computeroutput>*secondary</computeroutput> is created in the secondary 128-bit integer index table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga97763f770a398b600a160ea69ed17cc3_1ga97763f770a398b600a160ea69ed17cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx128_update</definition>
        <argsstring>(int32_t iterator, capi_name payer, const uint128_t *secondary)</argsstring>
        <name>db_idx128_update</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>const uint128_t *</type>
          <declname>secondary</declname>
        </param>
        <briefdescription>
<para>Update an association for a 128-bit integer secondary key to a primary key in a secondary 128-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Update an association for a 128-bit integer secondary key to a primary key in a secondary 128-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the table row containing the secondary key association to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs (use 0 to continue using current payer) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the <bold>new</bold> secondary key that will replace the existing one of the association </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the secondary key of the table row pointed to by <computeroutput>iterator</computeroutput> is replaced by <computeroutput>*secondary</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga60e66048c40043424581fe8e507a353b_1ga60e66048c40043424581fe8e507a353b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx128_remove</definition>
        <argsstring>(int32_t iterator)</argsstring>
        <name>db_idx128_remove</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Remove a table row from a secondary 128-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Remove a table row from a secondary 128-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- Iterator to the table row to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the table row pointed to by <computeroutput>iterator</computeroutput> is removed and the associated storage costs are refunded to the payer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gaac074a8b2d42865e7ca1b7932e234655_1gaac074a8b2d42865e7ca1b7932e234655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx128_next</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx128_next</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row following the referenced table row in a secondary 128-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row following the referenced table row in a secondary 128-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the next table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row following the referenced table row (or the end iterator of the table if the referenced table row is the last one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row following the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gae56365d133e8c27ba709121ed1ad0db9_1gae56365d133e8c27ba709121ed1ad0db9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx128_previous</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx128_previous</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row preceding the referenced table row in a secondary 128-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row preceding the referenced table row in a secondary 128-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the previous table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row preceding the referenced table row assuming one exists (it will return -1 if the referenced table row is the first one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table or it is the end iterator of the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row preceding the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga0c371690e732d2f18e7037e038d4685d_1ga0c371690e732d2f18e7037e038d4685d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx128_find_primary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint128_t *secondary, uint64_t primary)</argsstring>
        <name>db_idx128_find_primary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint128_t *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary 128-bit integer index table by primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary 128-bit integer index table by primary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint128_t</computeroutput> variable which will have its value set to the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key of the table row to look up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the table row with a primary key equal to <computeroutput>id</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga157160bb9692e0f1f6a98337e751f713_1ga157160bb9692e0f1f6a98337e751f713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx128_find_secondary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, const uint128_t *secondary, uint64_t *primary)</argsstring>
        <name>db_idx128_find_secondary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>const uint128_t *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary 128-bit integer index table by secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary 128-bit integer index table by secondary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key used to lookup the table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the first table row with a secondary key equal to <computeroutput>*secondary</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga32e8a5092c3ad1b31b512e2b240fc8a8_1ga32e8a5092c3ad1b31b512e2b240fc8a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx128_lowerbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint128_t *secondary, uint64_t *primary)</argsstring>
        <name>db_idx128_lowerbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint128_t *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary 128-bit integer index table that matches the lowerbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary 128-bit integer index table that matches the lowerbound condition for a given secondary key The table row that matches the lowerbound condition is the first table row in the table with the lowest secondary key that is &gt;= the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key first used to determine the lowerbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga00bc640a4a60ac49a07d538af3cadfd8_1ga00bc640a4a60ac49a07d538af3cadfd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx128_upperbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint128_t *secondary, uint64_t *primary)</argsstring>
        <name>db_idx128_upperbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint128_t *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary 128-bit integer index table that matches the upperbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary 128-bit integer index table that matches the upperbound condition for a given secondary key The table row that matches the upperbound condition is the first table row in the table with the lowest secondary key that is &gt; the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key first used to determine the upperbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gad7250e200698d82294588a636356c555_1gad7250e200698d82294588a636356c555" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx128_end</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table)</argsstring>
        <name>db_idx128_end</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary 128-bit integer index table. </para>        </briefdescription>
        <detaileddescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary 128-bit integer index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>end iterator of the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga6e8c05d79f751ca250f454b5211fd149_1ga6e8c05d79f751ca250f454b5211fd149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx256_store</definition>
        <argsstring>(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const uint128_t *data, uint32_t data_len)</argsstring>
        <name>db_idx256_store</name>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const uint128_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_len</declname>
        </param>
        <briefdescription>
<para>Store an association of a 256-bit secondary key to a primary key in a secondary 256-bit index table. </para>        </briefdescription>
        <detaileddescription>
<para>Store an association of a 256-bit secondary key to a primary key in a secondary 256-bit index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides (implied to be within the code of the current receiver) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key to which to associate the secondary key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the secondary key data stored as an array of 2 <computeroutput>uint128_t</computeroutput> integers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Must be set to 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the newly created table row </para></simplesect>
<simplesect kind="post"><para>new secondary key association between primary key <computeroutput>id</computeroutput> and the specified secondary key is created in the secondary 256-bit index table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga68a96c6e3358a8efa1a6c0b1ac57fbb2_1ga68a96c6e3358a8efa1a6c0b1ac57fbb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx256_update</definition>
        <argsstring>(int32_t iterator, capi_name payer, const uint128_t *data, uint32_t data_len)</argsstring>
        <name>db_idx256_update</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>const uint128_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_len</declname>
        </param>
        <briefdescription>
<para>Update an association for a 256-bit secondary key to a primary key in a secondary 256-bit index table. </para>        </briefdescription>
        <detaileddescription>
<para>Update an association for a 256-bit secondary key to a primary key in a secondary 256-bit index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the table row containing the secondary key association to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs (use 0 to continue using current payer) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the <bold>new</bold> secondary key data (which is stored as an array of 2 <computeroutput>uint128_t</computeroutput> integers) that will replace the existing one of the association </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Must be set to 2 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the secondary key of the table row pointed to by <computeroutput>iterator</computeroutput> is replaced by the specified secondary key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga08729f61864b60499a55cc226bf9d51f_1ga08729f61864b60499a55cc226bf9d51f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx256_remove</definition>
        <argsstring>(int32_t iterator)</argsstring>
        <name>db_idx256_remove</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Remove a table row from a secondary 256-bit index table. </para>        </briefdescription>
        <detaileddescription>
<para>Remove a table row from a secondary 256-bit index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- Iterator to the table row to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the table row pointed to by <computeroutput>iterator</computeroutput> is removed and the associated storage costs are refunded to the payer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga50b09ae563e297d986852b639fc569c4_1ga50b09ae563e297d986852b639fc569c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx256_next</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx256_next</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row following the referenced table row in a secondary 256-bit index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row following the referenced table row in a secondary 256-bit index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the next table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row following the referenced table row (or the end iterator of the table if the referenced table row is the last one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row following the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="544" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga658db41ae01fd5f9350dead6d90c301e_1ga658db41ae01fd5f9350dead6d90c301e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx256_previous</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx256_previous</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row preceding the referenced table row in a secondary 256-bit index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row preceding the referenced table row in a secondary 256-bit index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the previous table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row preceding the referenced table row assuming one exists (it will return -1 if the referenced table row is the first one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table or it is the end iterator of the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row preceding the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="557" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gab3174c648f526d352dcbc013ac9c7df4_1gab3174c648f526d352dcbc013ac9c7df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx256_find_primary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint128_t *data, uint32_t data_len, uint64_t primary)</argsstring>
        <name>db_idx256_find_primary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint128_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary 128-bit integer index table by primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary 256-bit index table by primary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the an array of 2 <computeroutput>uint128_t</computeroutput> integers which will act as the buffer to hold the retrieved secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Must be set to 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key of the table row to look up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, the buffer pointed to by <computeroutput>data</computeroutput> will be filled with the secondary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the table row with a primary key equal to <computeroutput>id</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga32b944f43d73d2dd8f81d4a8cbf1881a_1ga32b944f43d73d2dd8f81d4a8cbf1881a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx256_find_secondary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, const uint128_t *data, uint32_t data_len, uint64_t *primary)</argsstring>
        <name>db_idx256_find_secondary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>const uint128_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary 256-bit index table by secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary 256-bit index table by secondary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the secondary key data (which is stored as an array of 2 <computeroutput>uint128_t</computeroutput> integers) used to lookup the table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Must be set to 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the first table row with a secondary key equal to the specified secondary key or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="589" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gacb2612415bf82cd5c8363ae8d82b19e7_1gacb2612415bf82cd5c8363ae8d82b19e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx256_lowerbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint128_t *data, uint32_t data_len, uint64_t *primary)</argsstring>
        <name>db_idx256_lowerbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint128_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary 256-bit index table that matches the lowerbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary 256-bit index table that matches the lowerbound condition for a given secondary key The table row that matches the lowerbound condition is the first table row in the table with the lowest secondary key that is &gt;= the given key (uses lexicographical ordering on the 256-bit keys)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the secondary key data (which is stored as an array of 2 <computeroutput>uint128_t</computeroutput> integers) first used to determine the lowerbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Must be set to 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, the buffer pointed to by <computeroutput>data</computeroutput> will be filled with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga9be64d138ab8007da86302dc56b54f4b_1ga9be64d138ab8007da86302dc56b54f4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx256_upperbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, uint128_t *data, uint32_t data_len, uint64_t *primary)</argsstring>
        <name>db_idx256_upperbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>uint128_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data_len</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary 256-bit index table that matches the upperbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary 256-bit index table that matches the upperbound condition for a given secondary key The table row that matches the upperbound condition is the first table row in the table with the lowest secondary key that is &gt; the given key (uses lexicographical ordering on the 256-bit keys)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the secondary key data (which is stored as an array of 2 <computeroutput>uint128_t</computeroutput> integers) first used to determine the upperbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Must be set to 2 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, the buffer pointed to by <computeroutput>data</computeroutput> will be filled with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga6890b5f6167a302e2b1dacdcdac24538_1ga6890b5f6167a302e2b1dacdcdac24538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx256_end</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table)</argsstring>
        <name>db_idx256_end</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary 256-bit index table. </para>        </briefdescription>
        <detaileddescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary 256-bit index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>end iterator of the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="637" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga0a743bd3d42153ba725f8c7bff79bf2b_1ga0a743bd3d42153ba725f8c7bff79bf2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_double_store</definition>
        <argsstring>(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const double *secondary)</argsstring>
        <name>db_idx_double_store</name>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>secondary</declname>
        </param>
        <briefdescription>
<para>Store an association of a double-precision floating-point secondary key to a primary key in a secondary double-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Store an association of a double-precision floating-point secondary key to a primary key in a secondary double-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides (implied to be within the code of the current receiver) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key to which to associate the secondary key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the secondary key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the newly created table row </para></simplesect>
<simplesect kind="post"><para>new secondary key association between primary key <computeroutput>id</computeroutput> and secondary key <computeroutput>*secondary</computeroutput> is created in the secondary double-precision floating-point index table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga5652bf74b99632b57e371ba3aaa3e8db_1ga5652bf74b99632b57e371ba3aaa3e8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx_double_update</definition>
        <argsstring>(int32_t iterator, capi_name payer, const double *secondary)</argsstring>
        <name>db_idx_double_update</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>secondary</declname>
        </param>
        <briefdescription>
<para>Update an association for a double-precision floating-point secondary key to a primary key in a secondary double-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Update an association for a double-precision floating-point secondary key to a primary key in a secondary double-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the table row containing the secondary key association to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs (use 0 to continue using current payer) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the <bold>new</bold> secondary key that will replace the existing one of the association </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the secondary key of the table row pointed to by <computeroutput>iterator</computeroutput> is replaced by <computeroutput>*secondary</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="665" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga7879ef20b38df7a936152cd875307002_1ga7879ef20b38df7a936152cd875307002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx_double_remove</definition>
        <argsstring>(int32_t iterator)</argsstring>
        <name>db_idx_double_remove</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Remove a table row from a secondary double-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Remove a table row from a secondary double-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- Iterator to the table row to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the table row pointed to by <computeroutput>iterator</computeroutput> is removed and the associated storage costs are refunded to the payer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga47f20afce175cd339e73bd124b756c8f_1ga47f20afce175cd339e73bd124b756c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_double_next</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx_double_next</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row following the referenced table row in a secondary double-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row following the referenced table row in a secondary double-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the next table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row following the referenced table row (or the end iterator of the table if the referenced table row is the last one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row following the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga19bc2a710628fd89639c7ffbb8c63607_1ga19bc2a710628fd89639c7ffbb8c63607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_double_previous</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx_double_previous</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row preceding the referenced table row in a secondary double-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row preceding the referenced table row in a secondary double-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the previous table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row preceding the referenced table row assuming one exists (it will return -1 if the referenced table row is the first one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table or it is the end iterator of the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row preceding the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="702" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gaa53fb148f8152067cc849a3b3f660794_1gaa53fb148f8152067cc849a3b3f660794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_double_find_primary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, double *secondary, uint64_t primary)</argsstring>
        <name>db_idx_double_find_primary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary double-precision floating-point index table by primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary double-precision floating-point index table by primary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>double</computeroutput> variable which will have its value set to the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key of the table row to look up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the table row with a primary key equal to <computeroutput>id</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="717" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gab2c538b679cfe4ca8e87cf076beb5f33_1gab2c538b679cfe4ca8e87cf076beb5f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_double_find_secondary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, const double *secondary, uint64_t *primary)</argsstring>
        <name>db_idx_double_find_secondary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary double-precision floating-point index table by secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary double-precision floating-point index table by secondary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key used to lookup the table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>double</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the first table row with a secondary key equal to <computeroutput>*secondary</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="732" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gaedc57b6d44b12c4c37f13190fd9b6ef0_1gaedc57b6d44b12c4c37f13190fd9b6ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_double_lowerbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, double *secondary, uint64_t *primary)</argsstring>
        <name>db_idx_double_lowerbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary double-precision floating-point index table that matches the lowerbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary double-precision floating-point index table that matches the lowerbound condition for a given secondary key The table row that matches the lowerbound condition is the first table row in the table with the lowest secondary key that is &gt;= the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key first used to determine the lowerbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="749" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga7641eec51617092e0496c9522cbfd00a_1ga7641eec51617092e0496c9522cbfd00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_double_upperbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, double *secondary, uint64_t *primary)</argsstring>
        <name>db_idx_double_upperbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary double-precision floating-point index table that matches the upperbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary double-precision floating-point index table that matches the upperbound condition for a given secondary key The table row that matches the upperbound condition is the first table row in the table with the lowest secondary key that is &gt; the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key first used to determine the upperbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="766" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga29878ff539946d778ddcdf8191c421b6_1ga29878ff539946d778ddcdf8191c421b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_double_end</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table)</argsstring>
        <name>db_idx_double_end</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary double-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary double-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>end iterator of the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="778" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga86b5890f0e33b19be05965b49a31ba89_1ga86b5890f0e33b19be05965b49a31ba89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_long_double_store</definition>
        <argsstring>(uint64_t scope, capi_name table, capi_name payer, uint64_t id, const long double *secondary)</argsstring>
        <name>db_idx_long_double_store</name>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const long double *</type>
          <declname>secondary</declname>
        </param>
        <briefdescription>
<para>Store an association of a quadruple-precision floating-point secondary key to a primary key in a secondary quadruple-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Store an association of a quadruple-precision floating-point secondary key to a primary key in a secondary quadruple-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides (implied to be within the code of the current receiver) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key to which to associate the secondary key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the secondary key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the newly created table row </para></simplesect>
<simplesect kind="post"><para>new secondary key association between primary key <computeroutput>id</computeroutput> and secondary key <computeroutput>*secondary</computeroutput> is created in the secondary quadruple-precision floating-point index table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="793" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gaf38e68c7cf06346f9e9e4d11eb02296c_1gaf38e68c7cf06346f9e9e4d11eb02296c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx_long_double_update</definition>
        <argsstring>(int32_t iterator, capi_name payer, const long double *secondary)</argsstring>
        <name>db_idx_long_double_update</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>const long double *</type>
          <declname>secondary</declname>
        </param>
        <briefdescription>
<para>Update an association for a quadruple-precision floating-point secondary key to a primary key in a secondary quadruple-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Update an association for a quadruple-precision floating-point secondary key to a primary key in a secondary quadruple-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the table row containing the secondary key association to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- The account that pays for the storage costs (use 0 to continue using current payer) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the <bold>new</bold> secondary key that will replace the existing one of the association </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the secondary key of the table row pointed to by <computeroutput>iterator</computeroutput> is replaced by <computeroutput>*secondary</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="806" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga758aaa59619b46af51e33f823c19af06_1ga758aaa59619b46af51e33f823c19af06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void db_idx_long_double_remove</definition>
        <argsstring>(int32_t iterator)</argsstring>
        <name>db_idx_long_double_remove</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <briefdescription>
<para>Remove a table row from a secondary quadruple-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Remove a table row from a secondary quadruple-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- Iterator to the table row to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para>the table row pointed to by <computeroutput>iterator</computeroutput> is removed and the associated storage costs are refunded to the payer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga715571a131a495836fff374ad2beffd7_1ga715571a131a495836fff374ad2beffd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_long_double_next</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx_long_double_next</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row following the referenced table row in a secondary quadruple-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row following the referenced table row in a secondary quadruple-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the next table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row following the referenced table row (or the end iterator of the table if the referenced table row is the last one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row following the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="830" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_gadebcf8cd357d1ff5f42fa06bd44f4733_1gadebcf8cd357d1ff5f42fa06bd44f4733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_long_double_previous</definition>
        <argsstring>(int32_t iterator, uint64_t *primary)</argsstring>
        <name>db_idx_long_double_previous</name>
        <param>
          <type>int32_t</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row preceding the referenced table row in a secondary quadruple-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row preceding the referenced table row in a secondary quadruple-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterator</parametername>
</parameternamelist>
<parameterdescription>
<para>- The iterator to the referenced table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the previous table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iterator to the table row preceding the referenced table row assuming one exists (it will return -1 if the referenced table row is the first one in the table) </para></simplesect>
<simplesect kind="pre"><para><computeroutput>iterator</computeroutput> points to an existing table row in the table or it is the end iterator of the table </para></simplesect>
<simplesect kind="post"><para><computeroutput>*primary</computeroutput> will be replaced with the primary key of the table row preceding the referenced table row if it exists, otherwise <computeroutput>*primary</computeroutput> will be left untouched </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga2e60c45b99c33117a86cd36fdb00baac_1ga2e60c45b99c33117a86cd36fdb00baac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_long_double_find_primary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, long double *secondary, uint64_t primary)</argsstring>
        <name>db_idx_long_double_find_primary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary quadruple-precision floating-point index table by primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary quadruple-precision floating-point index table by primary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>long double</computeroutput> variable which will have its value set to the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- The primary key of the table row to look up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the table row with a primary key equal to <computeroutput>id</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="858" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga6b090dce51381f87ce9a9b86329d8576_1ga6b090dce51381f87ce9a9b86329d8576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_long_double_find_secondary</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, const long double *secondary, uint64_t *primary)</argsstring>
        <name>db_idx_long_double_find_secondary</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>const long double *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find a table row in a secondary quadruple-precision floating-point index table by secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find a table row in a secondary quadruple-precision floating-point index table by secondary key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key used to lookup the table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>long double</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the first table row with a secondary key equal to <computeroutput>*secondary</computeroutput> or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga3a6943d41bc35b02a9d4565174993cbd_1ga3a6943d41bc35b02a9d4565174993cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_long_double_lowerbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, long double *secondary, uint64_t *primary)</argsstring>
        <name>db_idx_long_double_lowerbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary quadruple-precision floating-point index table that matches the lowerbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary quadruple-precision floating-point index table that matches the lowerbound condition for a given secondary key The table row that matches the lowerbound condition is the first table row in the table with the lowest secondary key that is &gt;= the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key first used to determine the lowerbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="890" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga6a3326debe372bc025b3d12ac06e36b1_1ga6a3326debe372bc025b3d12ac06e36b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_long_double_upperbound</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table, long double *secondary, uint64_t *primary)</argsstring>
        <name>db_idx_long_double_upperbound</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <param>
          <type>long double *</type>
          <declname>secondary</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Find the table row in a secondary quadruple-precision floating-point index table that matches the upperbound condition for a given secondary key. </para>        </briefdescription>
        <detaileddescription>
<para>Find the table row in a secondary quadruple-precision floating-point index table that matches the upperbound condition for a given secondary key The table row that matches the upperbound condition is the first table row in the table with the lowest secondary key that is &gt; the given key</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to secondary key first used to determine the upperbound and which is then replaced with the secondary key of the found table row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a <computeroutput>uint64_t</computeroutput> variable which will have its value set to the primary key of the found table row </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*secondary</computeroutput> will be replaced with the secondary key of the found table row </para></simplesect>
<simplesect kind="post"><para>If and only if the table row is found, <computeroutput>*primary</computeroutput> will be replaced with the primary key of the found table row </para></simplesect>
<simplesect kind="return"><para>iterator to the found table row or the end iterator of the table if the table row could not be found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="907" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__database_ga3886b3d6d0ab2ac606c52b58c87d7546_1ga3886b3d6d0ab2ac606c52b58c87d7546" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t db_idx_long_double_end</definition>
        <argsstring>(capi_name code, uint64_t scope, capi_name table)</argsstring>
        <name>db_idx_long_double_end</name>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <param>
          <type><ref refid="types_8h_ad9871b90d15df8db5c660c78569f029f_1ad9871b90d15df8db5c660c78569f029f" kindref="member">capi_name</ref></type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary quadruple-precision floating-point index table. </para>        </briefdescription>
        <detaileddescription>
<para>Get an end iterator representing just-past-the-end of the last table row of a secondary quadruple-precision floating-point index table</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- The name of the owner of the table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- The scope where the table resides </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>table</parametername>
</parameternamelist>
<parameterdescription>
<para>- The table name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>end iterator of the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/db.h" line="919" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines C API for interfacing with blockchain database. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>defined in eos/LICENSE.txt </para></simplesect>
</para>    </detaileddescription>
    <location file="libraries/eosiolib/db.h"/>
  </compounddef>
</doxygen>
