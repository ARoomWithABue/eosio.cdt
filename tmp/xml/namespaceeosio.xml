<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespaceeosio" kind="namespace" language="C++">
    <compoundname>eosio</compoundname>
    <innerclass refid="structeosio_1_1action" prot="public">eosio::action</innerclass>
    <innerclass refid="structeosio_1_1asset" prot="public">eosio::asset</innerclass>
    <innerclass refid="classeosio_1_1block__timestamp" prot="public">eosio::block_timestamp</innerclass>
    <innerclass refid="structeosio_1_1blockchain__parameters" prot="public">eosio::blockchain_parameters</innerclass>
    <innerclass refid="structeosio_1_1const__mem__fun" prot="public">eosio::const_mem_fun</innerclass>
    <innerclass refid="classeosio_1_1contract" prot="public">eosio::contract</innerclass>
    <innerclass refid="classeosio_1_1datastream" prot="public">eosio::datastream</innerclass>
    <innerclass refid="classeosio_1_1datastream_3_01size__t_01_4" prot="public">eosio::datastream&lt; size_t &gt;</innerclass>
    <innerclass refid="structeosio_1_1extended__asset" prot="public">eosio::extended_asset</innerclass>
    <innerclass refid="classeosio_1_1extended__symbol" prot="public">eosio::extended_symbol</innerclass>
    <innerclass refid="classeosio_1_1fixed__key" prot="public">eosio::fixed_key</innerclass>
    <innerclass refid="structeosio_1_1fixed__point128" prot="public">eosio::fixed_point128</innerclass>
    <innerclass refid="structeosio_1_1fixed__point32" prot="public">eosio::fixed_point32</innerclass>
    <innerclass refid="structeosio_1_1fixed__point64" prot="public">eosio::fixed_point64</innerclass>
    <innerclass refid="structeosio_1_1ignore" prot="public">eosio::ignore</innerclass>
    <innerclass refid="structeosio_1_1ignore__wrapper" prot="public">eosio::ignore_wrapper</innerclass>
    <innerclass refid="structeosio_1_1indexed__by" prot="public">eosio::indexed_by</innerclass>
    <innerclass refid="structeosio_1_1inline__dispatcher" prot="public">eosio::inline_dispatcher</innerclass>
    <innerclass refid="structeosio_1_1inline__dispatcher_3_01void_07_t_1_1_5_08_07_args_8_8_8_08_00_01_name_01_4" prot="public">eosio::inline_dispatcher&lt; void(T::*)(Args...), Name &gt;</innerclass>
    <innerclass refid="classeosio_1_1iostream" prot="public">eosio::iostream</innerclass>
    <innerclass refid="classeosio_1_1memory__manager" prot="public">eosio::memory_manager</innerclass>
    <innerclass refid="classeosio_1_1microseconds" prot="public">eosio::microseconds</innerclass>
    <innerclass refid="classeosio_1_1multi__index" prot="public">eosio::multi_index</innerclass>
    <innerclass refid="structeosio_1_1name" prot="public">eosio::name</innerclass>
    <innerclass refid="structeosio_1_1onerror" prot="public">eosio::onerror</innerclass>
    <innerclass refid="structeosio_1_1permission__level" prot="public">eosio::permission_level</innerclass>
    <innerclass refid="structeosio_1_1producer__key" prot="public">eosio::producer_key</innerclass>
    <innerclass refid="structeosio_1_1producer__schedule" prot="public">eosio::producer_schedule</innerclass>
    <innerclass refid="structeosio_1_1public__key" prot="public">eosio::public_key</innerclass>
    <innerclass refid="classeosio_1_1singleton" prot="public">eosio::singleton</innerclass>
    <innerclass refid="classeosio_1_1symbol" prot="public">eosio::symbol</innerclass>
    <innerclass refid="classeosio_1_1symbol__code" prot="public">eosio::symbol_code</innerclass>
    <innerclass refid="classeosio_1_1time__point" prot="public">eosio::time_point</innerclass>
    <innerclass refid="classeosio_1_1time__point__sec" prot="public">eosio::time_point_sec</innerclass>
    <innerclass refid="classeosio_1_1transaction" prot="public">eosio::transaction</innerclass>
    <innerclass refid="classeosio_1_1transaction__header" prot="public">eosio::transaction_header</innerclass>
    <innernamespace refid="namespaceeosio_1_1__datastream__detail">eosio::_datastream_detail</innernamespace>
    <innernamespace refid="namespaceeosio_1_1__multi__index__detail">eosio::_multi_index_detail</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__fixed__key_ga9ae210ffc1e7d1e4f1514431b26aa3d1_1ga9ae210ffc1e7d1e4f1514431b26aa3d1" prot="public" static="no">
        <type><ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; 32 &gt;</type>
        <definition>typedef fixed_key&lt;32&gt; eosio::key256</definition>
        <argsstring></argsstring>
        <name>key256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="286" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__time_ga4f8fa835ef0dc341addb6e51d0d840b3_1ga4f8fa835ef0dc341addb6e51d0d840b3" prot="public" static="no">
        <type><ref refid="classeosio_1_1block__timestamp" kindref="compound">block_timestamp</ref></type>
        <definition>typedef block_timestamp eosio::block_timestamp_type</definition>
        <argsstring></argsstring>
        <name>block_timestamp_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/time.hpp" line="181" column="1" bodyfile="libraries/eosiolib/time.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__transaction_gaaf3ea17209c6d47129b2b232aede5439_1gaaf3ea17209c6d47129b2b232aede5439" prot="public" static="no">
        <type>std::tuple&lt; uint16_t, std::vector&lt; char &gt; &gt;</type>
        <definition>typedef std::tuple&lt;uint16_t, std::vector&lt;char&gt; &gt; eosio::extension</definition>
        <argsstring></argsstring>
        <name>extension</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.hpp" line="20" column="1" bodyfile="libraries/eosiolib/transaction.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__transaction_ga19c346b66f7145a5336177ac3eb0849e_1ga19c346b66f7145a5336177ac3eb0849e" prot="public" static="no">
        <type>std::vector&lt; <ref refid="group__transaction_gaaf3ea17209c6d47129b2b232aede5439_1gaaf3ea17209c6d47129b2b232aede5439" kindref="member">extension</ref> &gt;</type>
        <definition>typedef std::vector&lt;extension&gt; eosio::extensions_type</definition>
        <argsstring></argsstring>
        <name>extensions_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.hpp" line="21" column="1" bodyfile="libraries/eosiolib/transaction.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceeosio_abf83ffbbc722aa405f727e3eda4cc2d2_1abf83ffbbc722aa405f727e3eda4cc2d2" prot="public" static="no" mutable="no">
        <type><ref refid="classeosio_1_1memory__manager" kindref="compound">memory_manager</ref></type>
        <definition>memory_manager eosio::memory_heap</definition>
        <argsstring></argsstring>
        <name>memory_heap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/eosiolib.cpp" line="528" column="1" bodyfile="libraries/eosiolib/eosiolib.cpp" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceeosio_1a8afb93d00970c42ecd4c8cf2ff458c4c" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
        <definition>constexpr name eosio::same_payer</definition>
        <argsstring></argsstring>
        <name>same_payer</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="27" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__console_1gaed9b7380e114191d3dac1857b35e3da2" prot="public" static="yes" mutable="no">
        <type><ref refid="classeosio_1_1iostream" kindref="compound">iostream</ref></type>
        <definition>iostream eosio::cout</definition>
        <argsstring></argsstring>
        <name>cout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="329" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__action_ga3ce0a297276d44f03c9b5dc17fcd2b31_1ga3ce0a297276d44f03c9b5dc17fcd2b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eosio::unpack_action_data</definition>
        <argsstring>()</argsstring>
        <name>unpack_action_data</name>
        <briefdescription>
<para>Interpret the action body as type T. </para>        </briefdescription>
        <detaileddescription>
<para>This method unpacks the current action at type T.</para><para><simplesect kind="return"><para>Unpacked action data casted as T.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">struct<sp/>dummy_action<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>char<sp/>a;<sp/>//1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>unsigned<sp/>long<sp/>long<sp/>b;<sp/>//8</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/><sp/>c;<sp/>//4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>EOSLIB_SERIALIZE(<sp/>dummy_action,<sp/>(a)(b)(c)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">dummy_action<sp/>msg<sp/>=<sp/>unpack_action_data&lt;dummy_action&gt;();</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/action.hpp" line="47" column="1" bodyfile="libraries/eosiolib/action.hpp" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga4e1838d05857e38ddf8916e616698460_1ga4e1838d05857e38ddf8916e616698460" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::require_recipient</definition>
        <argsstring>(name notify_account)</argsstring>
        <name>require_recipient</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>notify_account</declname>
        </param>
        <briefdescription>
<para>Add the specified account to set of accounts to be notified. </para>        </briefdescription>
        <detaileddescription>
<para>Add the specified account to set of accounts to be notified</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notify_account</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to be verified </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/action.hpp" line="61" column="1" bodyfile="libraries/eosiolib/action.hpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__action_gaa61e47227ac315887caf1e028191ff7d_1gaa61e47227ac315887caf1e028191ff7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>accounts</declname>
            <defname>accounts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::require_recipient</definition>
        <argsstring>(name notify_account, accounts... remaining_accounts)</argsstring>
        <name>require_recipient</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>notify_account</declname>
        </param>
        <param>
          <type>accounts...</type>
          <declname>remaining_accounts</declname>
        </param>
        <briefdescription>
<para>Notify an account for this action. </para>        </briefdescription>
        <detaileddescription>
<para>All of the listed accounts will be added to the set of accounts to be notified</para><para>This helper method enables you to add multiple accounts to accounts to be notified list with a single call rather than having to call the similar C API multiple times.</para><para><simplesect kind="note"><para>action.code is also considered as part of the set of notified accounts</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>notify_account</parametername>
</parameternamelist>
<parameterdescription>
<para>account to be notified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remaining_accounts</parametername>
</parameternamelist>
<parameterdescription>
<para>accounts to be notified</para></parameterdescription>
</parameteritem>
</parameterlist>
Example:</para><para><programlisting><codeline><highlight class="normal">require_recipient(N(Account1),<sp/>N(Account2),<sp/>N(Account3));<sp/>//<sp/>throws<sp/>exception<sp/>if<sp/>any<sp/>of<sp/>them<sp/>not<sp/>in<sp/>set.</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/action.hpp" line="84" column="1" bodyfile="libraries/eosiolib/action.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga47b4afe79f1de07376e2ecdd541f92c7_1ga47b4afe79f1de07376e2ecdd541f92c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::require_auth</definition>
        <argsstring>(name n)</argsstring>
        <name>require_auth</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Verify specified account exists in the set of provided auths. </para>        </briefdescription>
        <detaileddescription>
<para>Verifies that <ref refid="structeosio_1_1name" kindref="compound">name</ref> exists in the set of provided auths on a action. Fails if not found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to be verified </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/action.hpp" line="95" column="1" bodyfile="libraries/eosiolib/action.hpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__action_gaa9c6bd255a286073e7dc8a337f2b11a2_1gaa9c6bd255a286073e7dc8a337f2b11a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::require_auth</definition>
        <argsstring>(const permission_level &amp;level)</argsstring>
        <name>require_auth</name>
        <param>
          <type>const <ref refid="structeosio_1_1permission__level" kindref="compound">permission_level</ref> &amp;</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Require the specified authorization for this action. </para>        </briefdescription>
        <detaileddescription>
<para>Require the specified authorization for this action. If this action doesn&apos;t contain the specified auth, it will fail.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>- Authorization to be required </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/action.hpp" line="157" column="1" bodyfile="libraries/eosiolib/action.hpp" bodystart="157" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga9e4650a61bbe0809cc62e6b2af8252d3_1ga9e4650a61bbe0809cc62e6b2af8252d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool eosio::has_auth</definition>
        <argsstring>(name n)</argsstring>
        <name>has_auth</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Verifies that n has auth. </para>        </briefdescription>
        <detaileddescription>
<para>Verifies that n has auth.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to be verified </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/action.hpp" line="167" column="1" bodyfile="libraries/eosiolib/action.hpp" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="group__action_ga887cd0fed2350c5ae52565ba6e290db3_1ga887cd0fed2350c5ae52565ba6e290db3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool eosio::is_account</definition>
        <argsstring>(name n)</argsstring>
        <name>is_account</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Verifies that n is an existing account. </para>        </briefdescription>
        <detaileddescription>
<para>Verifies that n is an existing account.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of the account to check </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/action.hpp" line="177" column="1" bodyfile="libraries/eosiolib/action.hpp" bodystart="177" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeosio_a0917f40ecb384d7934f7983351b397ce_1a0917f40ecb384d7934f7983351b397ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::dispatch_inline</definition>
        <argsstring>(name code, name act, std::vector&lt; permission_level &gt; perms, std::tuple&lt; Args... &gt; args)</argsstring>
        <name>dispatch_inline</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>act</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structeosio_1_1permission__level" kindref="compound">permission_level</ref> &gt;</type>
          <declname>perms</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/action.hpp" line="292" column="1" bodyfile="libraries/eosiolib/action.hpp" bodystart="292" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga1e49e445971a761be9607c1a3eb85bde_1ga1e49e445971a761be9607c1a3eb85bde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::optional&lt; T &gt; &amp;opt)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::optional&lt; T &gt; &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Serialize an optional. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize an optional into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="230" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="274" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga9e230ddd4f3d8ff314410dc9832829fd_1ga9e230ddd4f3d8ff314410dc9832829fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::optional&lt; T &gt; &amp;opt)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::optional&lt; T &gt; &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Deserialize an optional. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize an optional from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="292" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="292" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga5413cb7eba4e557a70d93ffa9f39b725_1ga5413cb7eba4e557a70d93ffa9f39b725" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const eosio::symbol_code sym_code)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1symbol__code" kindref="compound">eosio::symbol_code</ref></type>
          <declname>sym_code</declname>
        </param>
        <briefdescription>
<para>Serialize a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="292" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="313" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga647b59d0f66be8cbb0bac116d7d14a9e_1ga647b59d0f66be8cbb0bac116d7d14a9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, eosio::symbol_code &amp;sym_code)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="classeosio_1_1symbol__code" kindref="compound">eosio::symbol_code</ref> &amp;</type>
          <declname>sym_code</declname>
        </param>
        <briefdescription>
<para>Deserialize a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="329" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="329" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga4f20e587315c1c625ec8c7092f9d8465_1ga4f20e587315c1c625ec8c7092f9d8465" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const eosio::symbol sym)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1symbol" kindref="compound">eosio::symbol</ref></type>
          <declname>sym</declname>
        </param>
        <briefdescription>
<para>Serialize a symbol. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a symbol into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="329" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga015cd9edd44cc1af80641c39b4816f13_1ga015cd9edd44cc1af80641c39b4816f13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, eosio::symbol &amp;sym)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="classeosio_1_1symbol" kindref="compound">eosio::symbol</ref> &amp;</type>
          <declname>sym</declname>
        </param>
        <briefdescription>
<para>Deserialize a symbol. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a symbol from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="362" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="362" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga344108ff96bcee67d40711dacdd42845_1ga344108ff96bcee67d40711dacdd42845" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const ::eosio::ignore_wrapper&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const ::<ref refid="structeosio_1_1ignore__wrapper" kindref="compound">eosio::ignore_wrapper</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Serialize ignored_wrapper&lt;T&gt;&apos;s T value. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize an ignored_wrapper type into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="362" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga05879a71914d293c8a30b1a6710f8e51_1ga05879a71914d293c8a30b1a6710f8e51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const ::eosio::ignore&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const ::<ref refid="structeosio_1_1ignore" kindref="compound">eosio::ignore</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Serialize an ignored type. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize an ignored type into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignore</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="362" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gafea0491fecd3df192a3f245e8105a026_1gafea0491fecd3df192a3f245e8105a026" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, ::eosio::ignore&lt; T &gt;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>::<ref refid="structeosio_1_1ignore" kindref="compound">eosio::ignore</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
<para>Deserialize an ignored type. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize an ignored type from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignored</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="408" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gaeb6280d5e7942fcf839024442bc5c814_1gaeb6280d5e7942fcf839024442bc5c814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const capi_public_key pubkey)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="structcapi__public__key" kindref="compound">capi_public_key</ref></type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
<para>Serialize a <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref> into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkey</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="408" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga6f1b392200e9452c7f410ffd8fdfafe1_1ga6f1b392200e9452c7f410ffd8fdfafe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, capi_public_key &amp;pubkey)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="structcapi__public__key" kindref="compound">capi_public_key</ref> &amp;</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
<para>Deserialize a <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref> from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkey</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="437" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gaed3bc5bd372251b9cb90aff4cf85be5f_1gaed3bc5bd372251b9cb90aff4cf85be5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const key256 &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="group__fixed__key_ga9ae210ffc1e7d1e4f1514431b26aa3d1_1ga9ae210ffc1e7d1e4f1514431b26aa3d1" kindref="member">key256</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Serialize a key256. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a key256 into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="437" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga74974be2214a4e50e463ae866f9297d4_1ga74974be2214a4e50e463ae866f9297d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, key256 &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="group__fixed__key_ga9ae210ffc1e7d1e4f1514431b26aa3d1_1ga9ae210ffc1e7d1e4f1514431b26aa3d1" kindref="member">key256</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Deserialize a key256. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a key256 from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="467" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga7875cabe436fe6756c4b30eec326fe16_1ga7875cabe436fe6756c4b30eec326fe16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const bool &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Serialize a bool into a stream. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a bool into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="467" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="482" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga860a2cac0f4f00dacdade421c303ea9c_1ga860a2cac0f4f00dacdade421c303ea9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, bool &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Deserialize a bool. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a bool from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="496" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="496" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga69731c7e836d6521c2aa7d67ad1dbc4d_1ga69731c7e836d6521c2aa7d67ad1dbc4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const capi_checksum256 &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const capi_checksum256 &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Serialize a checksum256. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a checksum256 into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="496" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="513" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gaf18798375dd9ed43bea5888101883b9c_1gaf18798375dd9ed43bea5888101883b9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, capi_checksum256 &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>capi_checksum256 &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Deserialize a checksum256. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a checksum256 from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="528" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="528" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gab1dffa510122bd62ce3975e7b302c2c1_1gab1dffa510122bd62ce3975e7b302c2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::string &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a string. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a string into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="543" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="543" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gaa02846796253d9db1064e43fadbecb8e_1gaa02846796253d9db1064e43fadbecb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::string &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a string. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a string from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="560" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="560" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga86c994b49d0af580c72f4d966baca75b_1ga86c994b49d0af580c72f4d966baca75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::array&lt; T, N &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a fixed size array. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a fixed size array into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="582" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="582" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga60d3eb6bab6da17bd2986a051126d471_1ga60d3eb6bab6da17bd2986a051126d471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::array&lt; T, N &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::array&lt; T, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a fixed size array. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a fixed size array from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="601" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="601" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gac4ea18eb72ec93e5d06fff5a83623581_1gac4ea18eb72ec93e5d06fff5a83623581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; _datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, T)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
<para>Deserialize a a pointer. </para>        </briefdescription>
        <detaileddescription>
<para>Pointer should not be serialized, so this function will always throws an error</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
<simplesect kind="post"><para>Throw an exception if it is a pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="649" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga0c8758a01d2cdcd99922c268f2f4e4e9_1ga0c8758a01d2cdcd99922c268f2f4e4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;!_datastream_detail::is_primitive&lt; T &gt;() &amp;&amp;!_datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream &amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const T(&amp;v)[N])</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Serialize a fixed size array of non-primitive and non-pointer type. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a fixed size array of non-primitive type.</para><para>Serialize a fixed size array of non-primitive and non-pointer type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream</para></simplesect>
Serialize a fixed size array of non-primitive type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="667" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="667" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga9ddfcc1002e9cd4c267ca0986753c686_1ga9ddfcc1002e9cd4c267ca0986753c686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;!_datastream_detail::is_primitive&lt; T &gt;() &amp;&amp;!_datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream &amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, T(&amp;v)[N])</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Deserialize a fixed size array of non-primitive and non-pointer type. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a fixed size array of non-primitive type.</para><para>Deserialize a fixed size array of non-primitive and non-pointer type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream</para></simplesect>
Deserialize a fixed size array of non-primitive type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="706" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="706" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga5cb28ef1142e7ec5ba5c6672265efd47_1ga5cb28ef1142e7ec5ba5c6672265efd47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::vector&lt; char &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a vector of char. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a vector of char</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="746" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="746" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga53f4e770b9b3c9f1e92c2fa3fa0ec73a_1ga53f4e770b9b3c9f1e92c2fa3fa0ec73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a vector. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a vector</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="763" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="763" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gad202e8fcf8f49970c1710410c6059cde_1gad202e8fcf8f49970c1710410c6059cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::vector&lt; char &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::vector&lt; char &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a vector of char. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a vector of char</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="780" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="780" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gaedee239cff148b596f19a3c2c6c1adf1_1gaedee239cff148b596f19a3c2c6c1adf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a vector. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a vector</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="799" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="799" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gaf98424a2563d883b3883a14692aa195a_1gaf98424a2563d883b3883a14692aa195a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="809" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="809" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gae2a202ccccf405468ad654676bb41d40_1gae2a202ccccf405468ad654676bb41d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="818" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="818" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga0bb2cdf062825f96551ba663f3d74e17_1ga0bb2cdf062825f96551ba663f3d74e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Serialize a map. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a map</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="842" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="842" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga63b7d3e0c99e4f049574fd366a1c528a_1ga63b7d3e0c99e4f049574fd366a1c528a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Deserialize a map. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a map</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="862" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="862" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gab7049fdaa7895e6c31a482deba846434_1gab7049fdaa7895e6c31a482deba846434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const boost::container::flat_set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const boost::container::flat_set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="876" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="876" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga5f545f70b39155d1cd1da85f0e00b742_1ga5f545f70b39155d1cd1da85f0e00b742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, boost::container::flat_set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>boost::container::flat_set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="886" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="886" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga85b47a27bb41a2854d2b8daea9e7b9f0_1ga85b47a27bb41a2854d2b8daea9e7b9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const boost::container::flat_map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const boost::container::flat_map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Serialize a flat map. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a flat map</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the flat map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the flat map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="912" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="912" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga3b973878181cef2bdad7139958bd6ecf_1ga3b973878181cef2bdad7139958bd6ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, boost::container::flat_map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>boost::container::flat_map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Deserialize a flat map. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a flat map</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the flat map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the flat map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="932" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="932" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga124a00ba4d603044ef25be84a9fade48_1ga124a00ba4d603044ef25be84a9fade48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Serialize a tuple. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a tuple</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the objects contained in the tuple </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="955" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="955" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gac2e5487f43a496d7c263071e2502b986_1gac2e5487f43a496d7c263071e2502b986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Deserialize a tuple. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a tuple</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the objects contained in the tuple </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="973" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="973" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga59511f8552dbf4a2aced270041c17f04_1ga59511f8552dbf4a2aced270041c17f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_class&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream &amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const T &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a class. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a primitive type.</para><para>Serialize a class</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of class </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream</para></simplesect>
Serialize a primitive type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the primitive type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="991" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="991" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga7d64e2f48bca13601cf6606934e6e8e6_1ga7d64e2f48bca13601cf6606934e6e8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_class&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream &amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, T &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a class. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a primitive type.</para><para>Deserialize a class</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of class </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream</para></simplesect>
Deserialize a primitive type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the primitive type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1009" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1009" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga2ffaa5bd18836b7d40db601fb20965bb_1ga2ffaa5bd18836b7d40db601fb20965bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eosio::unpack</definition>
        <argsstring>(const char *buffer, size_t len)</argsstring>
        <name>unpack</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Unpack data inside a fixed size buffer as T. </para>        </briefdescription>
        <detaileddescription>
<para>Unpack data inside a fixed size buffer as T</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the unpacked data </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Length of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The unpacked data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1058" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1058" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga666b4d583161e4db595e31565fbb6a3d_1ga666b4d583161e4db595e31565fbb6a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eosio::unpack</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;bytes)</argsstring>
        <name>unpack</name>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Unpack data inside a variable size buffer as T. </para>        </briefdescription>
        <detaileddescription>
<para>Unpack data inside a variable size buffer as T</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the unpacked data </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The unpacked data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1074" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1074" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga30aa7d1c92792afc7f78af37372d68b7_1ga30aa7d1c92792afc7f78af37372d68b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t eosio::pack_size</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>pack_size</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get the size of the packed data. </para>        </briefdescription>
        <detaileddescription>
<para>Get the size of the packed data</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the data to be packed </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data to be packed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t - Size of the packed data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1087" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1087" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga16e657110c5a8e1ac34056bc473460a8_1ga16e657110c5a8e1ac34056bc473460a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt;char&gt; eosio::pack</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>pack</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get packed data. </para>        </briefdescription>
        <detaileddescription>
<para>Get packed data</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the data to be packed </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data to be packed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bytes - The packed data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1102" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1102" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gac006ab398b288a0582a2a59b991bf37c_1gac006ab398b288a0582a2a59b991bf37c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const capi_checksum160 &amp;cs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const capi_checksum160 &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Serializea capi_checksum160 type. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a capi_checksum160 type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1102" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1121" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga2cbcd06b5aae0e8ffd8b1550b0f39983_1ga2cbcd06b5aae0e8ffd8b1550b0f39983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, capi_checksum160 &amp;cs)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>capi_checksum160 &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Deserialize a capi_checksum160 type. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a capi_checksum160 type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1136" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1136" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_gafd1c5d3fad33115c2ba6a65f8f4b5792_1gafd1c5d3fad33115c2ba6a65f8f4b5792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const capi_checksum512 &amp;cs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const capi_checksum512 &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Serialize a capi_checksum512 type. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a capi_checksum512 type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1136" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1151" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_ga14d1988dcb3235cf059d90c01a2b7d74_1ga14d1988dcb3235cf059d90c01a2b7d74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, capi_checksum512 &amp;cs)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classeosio_1_1datastream" kindref="compound">datastream</ref>&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>capi_checksum512 &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Deserialize a capi_checksum512 type. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a capi_checksum512 type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1166" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1166" bodyend="1169"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeosio_a78b2709044b48bb39105d37d787fefea_1a78b2709044b48bb39105d37d787fefea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Contract</type>
          </param>
          <param>
            <type>typename FirstAction</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::dispatch</definition>
        <argsstring>(uint64_t code, uint64_t act)</argsstring>
        <name>dispatch</name>
        <param>
          <type>uint64_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/dispatcher.hpp" line="13" column="1" bodyfile="libraries/eosiolib/dispatcher.hpp" bodystart="13" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeosio_a289285490058d17de4a6a052b52dd680_1a289285490058d17de4a6a052b52dd680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Contract</type>
          </param>
          <param>
            <type>typename FirstAction</type>
          </param>
          <param>
            <type>typename SecondAction</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Actions</declname>
            <defname>Actions</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::dispatch</definition>
        <argsstring>(uint64_t code, uint64_t act)</argsstring>
        <name>dispatch</name>
        <param>
          <type>uint64_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method will dynamically dispatch an incoming set of actions to</para><para><programlisting><codeline><highlight class="normal">static<sp/>Contract::on(<sp/>ActionType<sp/>)</highlight></codeline>
</programlisting></para><para>For this to work the Actions must be derived from <ref refid="classeosio_1_1contract" kindref="compound">eosio::contract</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/dispatcher.hpp" line="33" column="1" bodyfile="libraries/eosiolib/dispatcher.hpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__dispatcher_ga8c4928c29096799ef6ddabf148dc9cf9_1ga8c4928c29096799ef6ddabf148dc9cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::execute_action</definition>
        <argsstring>(name self, name code, void(T::*func)(Args...))</argsstring>
        <name>execute_action</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>self</declname>
        </param>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>void(T::*)(Args...)</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Unpack the received action and execute the correponding action handler. </para>        </briefdescription>
        <detaileddescription>
<para>Unpack the received action and execute the correponding action handler</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- The contract class that has the correponding action handler, this contract should be derived from <ref refid="classeosio_1_1contract" kindref="compound">eosio::contract</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Q</parametername>
</parameternamelist>
<parameterdescription>
<para>- The namespace of the action handler function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The arguments that the action handler accepts, i.e. members of the action </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>- The contract object that has the correponding action handler </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>- The action handler </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/dispatcher.hpp" line="59" column="1" bodyfile="libraries/eosiolib/dispatcher.hpp" bodystart="59" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga4b6f34ade1f06f6583b4a17738bebe0c_1ga4b6f34ade1f06f6583b4a17738bebe0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::set_blockchain_parameters</definition>
        <argsstring>(const eosio::blockchain_parameters &amp;params)</argsstring>
        <name>set_blockchain_parameters</name>
        <param>
          <type>const <ref refid="structeosio_1_1blockchain__parameters" kindref="compound">eosio::blockchain_parameters</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Set the blockchain parameters Set the blockchain parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>- New blockchain parameters to set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/eosiolib.cpp" line="43" column="1" bodyfile="libraries/eosiolib/eosiolib.cpp" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="group__privileged_ga673da670d201ba73461eedd8bd1aec8f_1ga673da670d201ba73461eedd8bd1aec8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::get_blockchain_parameters</definition>
        <argsstring>(eosio::blockchain_parameters &amp;params)</argsstring>
        <name>get_blockchain_parameters</name>
        <param>
          <type><ref refid="structeosio_1_1blockchain__parameters" kindref="compound">eosio::blockchain_parameters</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Retrieve the blolckchain parameters Retrieve the blolckchain parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>- It will be replaced with the retrieved blockchain params </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/eosiolib.cpp" line="50" column="1" bodyfile="libraries/eosiolib/eosiolib.cpp" bodystart="50" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__fixed__key_gabbac43a956f81fd4bd4379ede0f82dd7_1gabbac43a956f81fd4bd4379ede0f82dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::operator==</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;c1, const fixed_key&lt; Size &gt; &amp;c2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2. </para>        </briefdescription>
        <detaileddescription>
<para>Lexicographically compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if c1 == c2, return true, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="19" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group__fixed__key_ga27b953728fd2a29e49f84e35135a70de_1ga27b953728fd2a29e49f84e35135a70de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::operator!=</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;c1, const fixed_key&lt; Size &gt; &amp;c2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2. </para>        </briefdescription>
        <detaileddescription>
<para>Lexicographically compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if c1 != c2, return true, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="22" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__fixed__key_gada6d080f1501ee085aabf5c7736461ca_1gada6d080f1501ee085aabf5c7736461ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::operator&gt;</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;c1, const fixed_key&lt; Size &gt; &amp;c2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2. </para>        </briefdescription>
        <detaileddescription>
<para>Lexicographically compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if c1 &gt; c2, return true, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="25" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="group__fixed__key_ga0d8567b962caa06cf0994134725e3f8d_1ga0d8567b962caa06cf0994134725e3f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::operator&lt;</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;c1, const fixed_key&lt; Size &gt; &amp;c2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2. </para>        </briefdescription>
        <detaileddescription>
<para>Lexicographically compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if c1 &lt; c2, return true, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="28" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="282" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeosio_a68c90c18b96d6e1789a567b16a7cdf2f_1a68c90c18b96d6e1789a567b16a7cdf2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eosio::assignHelper</definition>
        <argsstring>(T rhs_val, uint8_t q, uint8_t qr)</argsstring>
        <name>assignHelper</name>
        <param>
          <type>T</type>
          <declname>rhs_val</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>q</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>qr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixedpoint.hpp" line="651" column="1" bodyfile="libraries/eosiolib/fixedpoint.hpp" bodystart="651" bodyend="655"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeosio_a6d31edb37da483459fb277534d74bbf5_1a6d31edb37da483459fb277534d74bbf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structeosio_1_1fixed__point64" kindref="compound">fixed_point64</ref>&lt; Q &gt;</type>
        <definition>fixed_point64&lt;Q&gt; eosio::fixed_divide</definition>
        <argsstring>(uint32_t lhs, uint32_t rhs)</argsstring>
        <name>fixed_divide</name>
        <param>
          <type>uint32_t</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Wrapper function for dividing two unit64 variable and stores result in <ref refid="structeosio_1_1fixed__point64" kindref="compound">fixed_point64</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Wrapper function for dividing two unit32 variable and stores result in <ref refid="structeosio_1_1fixed__point64" kindref="compound">fixed_point64</ref></para><para>Example: <programlisting><codeline><highlight class="normal">fixed_point64&lt;33&gt;<sp/>result<sp/>=<sp/>fixed_divide(131313,<sp/>2323)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixedpoint.hpp" line="892" column="1" bodyfile="libraries/eosiolib/fixedpoint.hpp" bodystart="892" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeosio_a26f98cb47eae52015cd24d3c104fc50d_1a26f98cb47eae52015cd24d3c104fc50d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structeosio_1_1fixed__point128" kindref="compound">fixed_point128</ref>&lt; Q &gt;</type>
        <definition>fixed_point128&lt;Q&gt; eosio::fixed_divide</definition>
        <argsstring>(uint64_t lhs, uint64_t rhs)</argsstring>
        <name>fixed_divide</name>
        <param>
          <type>uint64_t</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Wrapper function for dividing two unit64 variable and stores result in <ref refid="structeosio_1_1fixed__point128" kindref="compound">fixed_point128</ref> Wrapper function for dividing two unit64 variable and stores result in <ref refid="structeosio_1_1fixed__point128" kindref="compound">fixed_point128</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Example: <programlisting><codeline><highlight class="normal">fixed_point128&lt;33&gt;<sp/>result<sp/>=<sp/>fixed_divide(131313,<sp/>2323)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixedpoint.hpp" line="911" column="1" bodyfile="libraries/eosiolib/fixedpoint.hpp" bodystart="911" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeosio_ad879334b66c1201b982eda5a4fea9507_1ad879334b66c1201b982eda5a4fea9507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eosio::check_transaction_authorization</definition>
        <argsstring>(const transaction &amp;trx, const std::set&lt; permission_level &gt; &amp;provided_permissions, const std::set&lt; public_key &gt; &amp;provided_keys=std::set&lt; public_key &gt;())</argsstring>
        <name>check_transaction_authorization</name>
        <param>
          <type>const <ref refid="classeosio_1_1transaction" kindref="compound">transaction</ref> &amp;</type>
          <declname>trx</declname>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="structeosio_1_1permission__level" kindref="compound">permission_level</ref> &gt; &amp;</type>
          <declname>provided_permissions</declname>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref> &gt; &amp;</type>
          <declname>provided_keys</declname>
          <defval>std::set&lt; <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref> &gt;()</defval>
        </param>
        <briefdescription>
<para>Checks if a transaction is authorized by a provided set of keys and permissions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>- the transaction for which to check authorizations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of permissions which have authorized the transaction (empty permission name acts as wildcard) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of public keys which have authorized the transaction</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the transaction was authorized by provided keys and permissions </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/permission.hpp" line="26" column="1" bodyfile="libraries/eosiolib/permission.hpp" bodystart="26" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceeosio_a2ded7b51e4363cd7634070612add2e99_1a2ded7b51e4363cd7634070612add2e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eosio::check_permission_authorization</definition>
        <argsstring>(name account, name permission, const std::set&lt; public_key &gt; &amp;provided_keys, const std::set&lt; permission_level &gt; &amp;provided_permissions=std::set&lt; permission_level &gt;(), uint64_t provided_delay_us=static_cast&lt; uint64_t &gt;(std::numeric_limits&lt; int64_t &gt;::max()))</argsstring>
        <name>check_permission_authorization</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>account</declname>
        </param>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>permission</declname>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref> &gt; &amp;</type>
          <declname>provided_keys</declname>
        </param>
        <param>
          <type>const std::set&lt; <ref refid="structeosio_1_1permission__level" kindref="compound">permission_level</ref> &gt; &amp;</type>
          <declname>provided_permissions</declname>
          <defval>std::set&lt; <ref refid="structeosio_1_1permission__level" kindref="compound">permission_level</ref> &gt;()</defval>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>provided_delay_us</declname>
          <defval>static_cast&lt; uint64_t &gt;(std::numeric_limits&lt; int64_t &gt;::max())</defval>
        </param>
        <briefdescription>
<para>Checks if a permission is authorized by a provided delay and a provided set of keys and permissions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>- the account owner of the permission </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>permission</parametername>
</parameternamelist>
<parameterdescription>
<para>- the permission name to check for authorization </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of public keys which have authorized the transaction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_permissions</parametername>
</parameternamelist>
<parameterdescription>
<para>- the set of permissions which have authorized the transaction (empty permission name acts as wildcard) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>provided_delay_us</parametername>
</parameternamelist>
<parameterdescription>
<para>- the provided delay in microseconds (cannot exceed INT64_MAX)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the permission was authorized by provided delay, keys, and permissions </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/permission.hpp" line="68" column="1" bodyfile="libraries/eosiolib/permission.hpp" bodystart="68" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gaa0a56fe314d032d027a1565d93a68b21_1gaa0a56fe314d032d027a1565d93a68b21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(const char *ptr)</argsstring>
        <name>print</name>
        <param>
          <type>const char *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Prints string. </para>        </briefdescription>
        <detaileddescription>
<para>Prints string</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>- a null terminated string </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="46" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="46" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gabe1c02d3a4a65108ff3bc59db64485a0_1gabe1c02d3a4a65108ff3bc59db64485a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>print</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="50" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga6daff3c05760581064c390a27a79fd30_1ga6daff3c05760581064c390a27a79fd30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>print</name>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="54" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga514f168270d72ecae0083dd2968f7329_1ga514f168270d72ecae0083dd2968f7329" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(const char c)</argsstring>
        <name>print</name>
        <param>
          <type>const char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="58" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gad0342d58fa17a7bea359607c6cfcf0cf_1gad0342d58fa17a7bea359607c6cfcf0cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(int num)</argsstring>
        <name>print</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints signed integer as a 64 bit signed integer. </para>        </briefdescription>
        <detaileddescription>
<para>Prints signed integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="68" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga4412b37ef401946605e5cef937c3f8dc_1ga4412b37ef401946605e5cef937c3f8dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(int32_t num)</argsstring>
        <name>print</name>
        <param>
          <type>int32_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints 32 bit signed integer as a 64 bit signed integer. </para>        </briefdescription>
        <detaileddescription>
<para>Prints 32 bit signed integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="78" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gaad90d9aa7b7ba103d2e943bf38c91072_1gaad90d9aa7b7ba103d2e943bf38c91072" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(int64_t num)</argsstring>
        <name>print</name>
        <param>
          <type>int64_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints 64 bit signed integer as a 64 bit signed integer. </para>        </briefdescription>
        <detaileddescription>
<para>Prints 64 bit signed integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="88" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga3c85835d3c6e556b5da524030e70e971_1ga3c85835d3c6e556b5da524030e70e971" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(unsigned int num)</argsstring>
        <name>print</name>
        <param>
          <type>unsigned int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints unsigned integer as a 64 bit unsigned integer. </para>        </briefdescription>
        <detaileddescription>
<para>Prints unsigned integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="99" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="99" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga0c95ab36e2c3f91a627270c09ff9140f_1ga0c95ab36e2c3f91a627270c09ff9140f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(uint32_t num)</argsstring>
        <name>print</name>
        <param>
          <type>uint32_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints 32 bit unsigned integer as a 64 bit unsigned integer. </para>        </briefdescription>
        <detaileddescription>
<para>Prints 32 bit unsigned integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="109" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga9bdf0bd18006f43820d73ec9f8cc50b8_1ga9bdf0bd18006f43820d73ec9f8cc50b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(uint64_t num)</argsstring>
        <name>print</name>
        <param>
          <type>uint64_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints 64 bit unsigned integer as a 64 bit unsigned integer. </para>        </briefdescription>
        <detaileddescription>
<para>Prints 64 bit unsigned integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="119" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga925806f986898c01e8de34234f951bdc_1ga925806f986898c01e8de34234f951bdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(int128_t num)</argsstring>
        <name>print</name>
        <param>
          <type>int128_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints 128 bit signed integer. </para>        </briefdescription>
        <detaileddescription>
<para>Prints 128 bit signed integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="129" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gacbb116ac61f216fafa100011bce090ee_1gacbb116ac61f216fafa100011bce090ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(uint128_t num)</argsstring>
        <name>print</name>
        <param>
          <type>uint128_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints 128 bit unsigned integer. </para>        </briefdescription>
        <detaileddescription>
<para>Prints 128 bit unsigned integer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="139" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga02d168bc05492d64cefea469dd114c12_1ga02d168bc05492d64cefea469dd114c12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(float num)</argsstring>
        <name>print</name>
        <param>
          <type>float</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints single-precision floating point number (i.e. float) </para>        </briefdescription>
        <detaileddescription>
<para>Prints single-precision floating point number</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="150" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="150" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga8753f6a7c7d5c518f6369cfebf5be1bb_1ga8753f6a7c7d5c518f6369cfebf5be1bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(double num)</argsstring>
        <name>print</name>
        <param>
          <type>double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints double-precision floating point number (i.e. double) </para>        </briefdescription>
        <detaileddescription>
<para>Prints double-precision floating point number</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="158" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga2a3eea270ff4dbe4a15c2269a5c2cfec_1ga2a3eea270ff4dbe4a15c2269a5c2cfec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(long double num)</argsstring>
        <name>print</name>
        <param>
          <type>long double</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Prints quadruple-precision floating point number (i.e. long double) </para>        </briefdescription>
        <detaileddescription>
<para>Prints quadruple-precision floating point number</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="166" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga2785282e4babb79499ba03e719e20aa1_1ga2785282e4babb79499ba03e719e20aa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;val)</argsstring>
        <name>print</name>
        <param>
          <type>const <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Prints <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> as a hexidecimal string. </para>        </briefdescription>
        <detaileddescription>
<para>Prints <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> as a hexidecimal string</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="176" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="176" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gaa47b5b44cf50be5fe5ca837ef7e6d583_1gaa47b5b44cf50be5fe5ca837ef7e6d583" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(fixed_key&lt; Size &gt; &amp;val)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref>&lt; Size &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Prints <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> as a hexidecimal string. </para>        </briefdescription>
        <detaileddescription>
<para>Prints <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> as a hexidecimal string</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="189" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="189" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gaddacdc539ef6e6fb4f55bf04d1a0d22c_1gaddacdc539ef6e6fb4f55bf04d1a0d22c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(name name)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Prints a 64 bit names as base32 encoded string. </para>        </briefdescription>
        <detaileddescription>
<para>Prints a 64 bit names as base32 encoded string</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>64 bit name to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="199" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gaeb64d709bf057338af83ea1b95a0d16d_1gaeb64d709bf057338af83ea1b95a0d16d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(eosio::symbol_code sym_code)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="classeosio_1_1symbol__code" kindref="compound">eosio::symbol_code</ref></type>
          <declname>sym_code</declname>
        </param>
        <briefdescription>
<para>Prints a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Prints a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sym_code</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol code to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="209" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga3b7dd9bbca5a20bad3acb94b6b7354be_1ga3b7dd9bbca5a20bad3acb94b6b7354be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(bool val)</argsstring>
        <name>print</name>
        <param>
          <type>bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Prints bool. </para>        </briefdescription>
        <detaileddescription>
<para>Prints bool</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="222" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="222" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gaa09d15641c76813eea61b876d8266400_1gaa09d15641c76813eea61b876d8266400" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>print</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Prints class object. </para>        </briefdescription>
        <detaileddescription>
<para>Prints class object</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>T must implements <ref refid="group__console_gaa0a56fe314d032d027a1565d93a68b21_1gaa0a56fe314d032d027a1565d93a68b21" kindref="member">print()</ref> function </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="235" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="235" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gab9715bf002b919701d38e3ff931feabf_1gab9715bf002b919701d38e3ff931feabf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::print_f</definition>
        <argsstring>(const char *s)</argsstring>
        <name>print_f</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Prints null terminated string. </para>        </briefdescription>
        <detaileddescription>
<para>Prints null terminated string</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>null terminated string to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="245" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gafcfae01c6d714474da8407a1c195c836_1gafcfae01c6d714474da8407a1c195c836" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::print_f</definition>
        <argsstring>(const char *s, Arg val, Args... rest)</argsstring>
        <name>print_f</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Arg</type>
          <declname>val</declname>
        </param>
        <param>
          <type>Args...</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
<para>Prints formatted string. </para>        </briefdescription>
        <detaileddescription>
<para>Prints formatted string. It behaves similar to C printf/</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value used to replace the format specifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value used to replace the format specifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>- Null terminated string with to be printed (it can contains format specifier) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value used to replace the format specifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rest</parametername>
</parameternamelist>
<parameterdescription>
<para>- The values used to replace the format specifier</para></parameterdescription>
</parameteritem>
</parameterlist>
Example: <programlisting><codeline><highlight class="normal">print_f(&quot;Number<sp/>of<sp/>apples:<sp/>%&quot;,<sp/>10);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="265" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="265" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="group__console_gab5232cf7452d463948eac1179f31d9f0_1gab5232cf7452d463948eac1179f31d9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::print</definition>
        <argsstring>(Arg &amp;&amp;a, Args &amp;&amp;... args)</argsstring>
        <name>print</name>
        <param>
          <type>Arg &amp;&amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print out value / list of values. </para>        </briefdescription>
        <detaileddescription>
<para>Print out value / list of values <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to be printed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>- The other values to be printed</para></parameterdescription>
</parameteritem>
</parameterlist>
Example:</para><para><programlisting><codeline><highlight class="normal">const<sp/>char<sp/>*s<sp/>=<sp/>&quot;Hello<sp/>World!&quot;;</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>unsigned_64_bit_int<sp/>=<sp/>1e+18;</highlight></codeline>
<codeline><highlight class="normal">uint128_t<sp/>unsigned_128_bit_int<sp/>(87654323456);</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>string_as_unsigned_64_bit<sp/>=<sp/>N(abcde);</highlight></codeline>
<codeline><highlight class="normal">print(s<sp/>,<sp/>unsigned_64_bit_int,<sp/>unsigned_128_bit_int,<sp/>string_as_unsigned_64_bit);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Ouput:<sp/>Hello<sp/>World!100000000000000000087654323456abcde</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="295" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="group__console_ga827f0aac6315e7963bcd52656cd7eeed_1ga827f0aac6315e7963bcd52656cd7eeed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classeosio_1_1iostream" kindref="compound">iostream</ref> &amp;</type>
        <definition>iostream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(iostream &amp;out, const T &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classeosio_1_1iostream" kindref="compound">iostream</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Overload c++ iostream. </para>        </briefdescription>
        <detaileddescription>
<para>Overload c++ iostream <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>- Output strem </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to be printed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>iostream&amp; - Reference to the input output stream</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">const<sp/>char<sp/>*s<sp/>=<sp/>&quot;Hello<sp/>World!&quot;;</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>unsigned_64_bit_int<sp/>=<sp/>1e+18;</highlight></codeline>
<codeline><highlight class="normal">uint128_t<sp/>unsigned_128_bit_int<sp/>(87654323456);</highlight></codeline>
<codeline><highlight class="normal">uint64_t<sp/>string_as_unsigned_64_bit<sp/>=<sp/>N(abcde);</highlight></codeline>
<codeline><highlight class="normal">std::out<sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>unsigned_64_bit_int<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/><sp/>&lt;&lt;<sp/>unsigned_128_bit_int<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>string_as_unsigned_64_bit;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Output:<sp/>Hello<sp/>World!<sp/>1000000000000000000<sp/>87654323456<sp/>abcde</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/print.hpp" line="324" column="1" bodyfile="libraries/eosiolib/print.hpp" bodystart="324" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="group__time_gaf7174ec0c48074b993ec6bac37a84682_1gaf7174ec0c48074b993ec6bac37a84682" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds eosio::seconds</definition>
        <argsstring>(int64_t s)</argsstring>
        <name>seconds</name>
        <param>
          <type>int64_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/time.hpp" line="36" column="1" bodyfile="libraries/eosiolib/time.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="group__time_ga2b8d5b8f5a1829bd6967c3fe89eea506_1ga2b8d5b8f5a1829bd6967c3fe89eea506" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds eosio::milliseconds</definition>
        <argsstring>(int64_t s)</argsstring>
        <name>milliseconds</name>
        <param>
          <type>int64_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/time.hpp" line="37" column="1" bodyfile="libraries/eosiolib/time.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="group__time_ga29a31fdb3cb6abce3f6abcf6840ea00c_1ga29a31fdb3cb6abce3f6abcf6840ea00c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds eosio::minutes</definition>
        <argsstring>(int64_t m)</argsstring>
        <name>minutes</name>
        <param>
          <type>int64_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/time.hpp" line="38" column="1" bodyfile="libraries/eosiolib/time.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="group__time_ga33b982404d2fd14a2618564ae69db447_1ga33b982404d2fd14a2618564ae69db447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds eosio::hours</definition>
        <argsstring>(int64_t h)</argsstring>
        <name>hours</name>
        <param>
          <type>int64_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/time.hpp" line="39" column="1" bodyfile="libraries/eosiolib/time.hpp" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__time_gae1538fa412576d5b367a62c2f0e38730_1gae1538fa412576d5b367a62c2f0e38730" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds eosio::days</definition>
        <argsstring>(int64_t d)</argsstring>
        <name>days</name>
        <param>
          <type>int64_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/time.hpp" line="40" column="1" bodyfile="libraries/eosiolib/time.hpp" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group__transaction_gac01a00482f2dc95bf4850b2e8213ee90_1gac01a00482f2dc95bf4850b2e8213ee90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1action" kindref="compound">action</ref></type>
        <definition>action eosio::get_action</definition>
        <argsstring>(uint32_t type, uint32_t index)</argsstring>
        <name>get_action</name>
        <param>
          <type>uint32_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the indicated action from the active transaction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>- 0 for context free action, 1 for action </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>- the index of the requested action </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the indicated action </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/transaction.hpp" line="82" column="1" bodyfile="libraries/eosiolib/transaction.hpp" bodystart="82" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/eosiolib/action.hpp" line="15" column="1"/>
  </compounddef>
</doxygen>
