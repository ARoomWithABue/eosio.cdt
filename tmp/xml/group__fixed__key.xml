<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="group__fixed__key" kind="group">
    <compoundname>fixed_key</compoundname>
    <title>Fixed Size Key</title>
    <innerclass refid="classeosio_1_1fixed__key" prot="public">eosio::fixed_key</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__fixed__key_1ga9ae210ffc1e7d1e4f1514431b26aa3d1" prot="public" static="no">
        <type>fixed_key&lt; 32 &gt;</type>
        <definition>typedef fixed_key&lt;32&gt; eosio::key256</definition>
        <argsstring></argsstring>
        <name>key256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="286" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="286" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__fixed__key_1gabbac43a956f81fd4bd4379ede0f82dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::operator==</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;c1, const fixed_key&lt; Size &gt; &amp;c2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const fixed_key&lt; Size &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const fixed_key&lt; Size &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2. </para>        </briefdescription>
        <detaileddescription>
<para>Lexicographically compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if c1 == c2, return true, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="19" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="243" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group__fixed__key_1ga27b953728fd2a29e49f84e35135a70de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::operator!=</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;c1, const fixed_key&lt; Size &gt; &amp;c2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const fixed_key&lt; Size &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const fixed_key&lt; Size &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2. </para>        </briefdescription>
        <detaileddescription>
<para>Lexicographically compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if c1 != c2, return true, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="22" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="256" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="group__fixed__key_1gada6d080f1501ee085aabf5c7736461ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::operator&gt;</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;c1, const fixed_key&lt; Size &gt; &amp;c2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const fixed_key&lt; Size &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const fixed_key&lt; Size &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2. </para>        </briefdescription>
        <detaileddescription>
<para>Lexicographically compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if c1 &gt; c2, return true, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="25" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="group__fixed__key_1ga0d8567b962caa06cf0994134725e3f8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>Size</declname>
            <defname>Size</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool eosio::operator&lt;</definition>
        <argsstring>(const fixed_key&lt; Size &gt; &amp;c1, const fixed_key&lt; Size &gt; &amp;c2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const fixed_key&lt; Size &gt; &amp;</type>
          <declname>c1</declname>
        </param>
        <param>
          <type>const fixed_key&lt; Size &gt; &amp;</type>
          <declname>c2</declname>
        </param>
        <briefdescription>
<para>Compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2. </para>        </briefdescription>
        <detaileddescription>
<para>Lexicographically compares two <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> variables c1 and c2 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c1</parametername>
</parameternamelist>
<parameterdescription>
<para>- First <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c2</parametername>
</parameternamelist>
<parameterdescription>
<para>- Second <ref refid="classeosio_1_1fixed__key" kindref="compound">fixed_key</ref> object to compare </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if c1 &lt; c2, return true, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/fixed_key.hpp" line="28" column="1" bodyfile="libraries/eosiolib/fixed_key.hpp" bodystart="282" bodyend="284"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Fixed size key sorted lexicographically for Multi Index Table. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
