<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classeosio_1_1symbol__code" kind="class" language="C++" prot="public">
    <compoundname>eosio::symbol_code</compoundname>
    <includes refid="symbol_8hpp" local="no">symbol.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classeosio_1_1symbol__code_1ac9f8aec29c30e987ececc9e31dcae1e9" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t eosio::symbol_code::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="154" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classeosio_1_1symbol__code_a9d8538c2ff41df391b45cfb6190a1ed4_1a9d8538c2ff41df391b45cfb6190a1ed4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr eosio::symbol_code::symbol_code</definition>
        <argsstring>()</argsstring>
        <name>symbol_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="29" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1symbol__code_a5a95bedec99aff1d70a782b365bc28d0_1a5a95bedec99aff1d70a782b365bc28d0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr eosio::symbol_code::symbol_code</definition>
        <argsstring>(uint64_t raw)</argsstring>
        <name>symbol_code</name>
        <param>
          <type>uint64_t</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="31" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="31" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1symbol__code_afba617179edadad41667b707176943fc_1afba617179edadad41667b707176943fc" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr eosio::symbol_code::symbol_code</definition>
        <argsstring>(std::string_view str)</argsstring>
        <name>symbol_code</name>
        <param>
          <type>std::string_view</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="35" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="35" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1symbol__code_a87acfd4b3bd04ca4b9ba84f6ea12d5d0_1a87acfd4b3bd04ca4b9ba84f6ea12d5d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool eosio::symbol_code::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if the symbol code is valid <simplesect kind="return"><para>true - if symbol is valid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="54" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="54" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1symbol__code_adf291364853aa746ddc32942881b2e64_1adf291364853aa746ddc32942881b2e64" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t eosio::symbol_code::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the character length of the provided symbol</para><para><simplesect kind="return"><para>length - character length of the provided symbol </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="76" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1symbol__code_a9c4430961f11cf7a207ac7d4c4827210_1a9c4430961f11cf7a207ac7d4c4827210" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr uint64_t</type>
        <definition>constexpr uint64_t eosio::symbol_code::raw</definition>
        <argsstring>() const</argsstring>
        <name>raw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="86" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1symbol__code_a9b45275437c716ebc9ba95d199c04ed1_1a9b45275437c716ebc9ba95d199c04ed1" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr eosio::symbol_code::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="88" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1symbol__code_a9f6752ffa0fd8b10d2531b18978aeb9e_1a9f6752ffa0fd8b10d2531b18978aeb9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char* eosio::symbol_code::write_as_string</definition>
        <argsstring>(char *begin, char *end) const</argsstring>
        <name>write_as_string</name>
        <param>
          <type>char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Writes the <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> as a string to the provided char buffer. </para>        </briefdescription>
        <detaileddescription>
<para>Writes the <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> as a string to the provided char buffer</para><para><simplesect kind="pre"><para>Appropriate Size Precondition: (begin + 7) &lt;= end and (begin + 7) does not overflow </para></simplesect>
<simplesect kind="pre"><para>Valid Memory Region Precondition: The range [begin, end) must be a valid range of memory to write to. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>- The start of the char buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>- Just past the end of the char buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char* - Just past the end of the last character written (returns begin if the Appropriate Size Precondition is not satisfied) </para></simplesect>
<simplesect kind="post"><para>If the Appropriate Size Precondition is satisfied, the range [begin, returned pointer) contains the string representation of the <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="102" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="102" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1symbol__code_a075d0d69307bd9180b147a809f07bad5_1a075d0d69307bd9180b147a809f07bad5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string eosio::symbol_code::to_string</definition>
        <argsstring>() const</argsstring>
        <name>to_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="118" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="118" bodyend="122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classeosio_1_1symbol__code_a679be838b5e39b806fa42577124a214a_1a679be838b5e39b806fa42577124a214a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator==</definition>
        <argsstring>(const symbol_code &amp;a, const symbol_code &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Equivalency operator. </para>        </briefdescription>
        <detaileddescription>
<para>Equivalency operator. Returns true if a == b (are the same)</para><para><simplesect kind="return"><para>boolean - true if both provided symbol_codes are the same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="130" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="friend" id="classeosio_1_1symbol__code_acd21f55772dbdf25fe5dbc182683fee0_1acd21f55772dbdf25fe5dbc182683fee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator!=</definition>
        <argsstring>(const symbol_code &amp;a, const symbol_code &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Inverted equivalency operator. </para>        </briefdescription>
        <detaileddescription>
<para>Inverted equivalency operator. Returns true if a != b (are different)</para><para><simplesect kind="return"><para>boolean - true if both provided symbol_codes are not the same </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="140" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="friend" id="classeosio_1_1symbol__code_a8dd79cc2a20dc7bf2788fd6416003891_1a8dd79cc2a20dc7bf2788fd6416003891" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend constexpr bool</type>
        <definition>constexpr bool operator&lt;</definition>
        <argsstring>(const symbol_code &amp;a, const symbol_code &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Less than operator. </para>        </briefdescription>
        <detaileddescription>
<para>Less than operator. Returns true if a &lt; b. <simplesect kind="return"><para>boolean - true if <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> <computeroutput>a</computeroutput> is less than <computeroutput>b</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/symbol.hpp" line="149" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="149" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/eosiolib/symbol.hpp" line="27" column="1" bodyfile="libraries/eosiolib/symbol.hpp" bodystart="27" bodyend="155"/>
    <listofallmembers>
      <member refid="classeosio_1_1symbol__code_a87acfd4b3bd04ca4b9ba84f6ea12d5d0_1a87acfd4b3bd04ca4b9ba84f6ea12d5d0" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>is_valid</name></member>
      <member refid="classeosio_1_1symbol__code_adf291364853aa746ddc32942881b2e64_1adf291364853aa746ddc32942881b2e64" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>length</name></member>
      <member refid="classeosio_1_1symbol__code_a9b45275437c716ebc9ba95d199c04ed1_1a9b45275437c716ebc9ba95d199c04ed1" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>operator bool</name></member>
      <member refid="classeosio_1_1symbol__code_acd21f55772dbdf25fe5dbc182683fee0_1acd21f55772dbdf25fe5dbc182683fee0" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>operator!=</name></member>
      <member refid="classeosio_1_1symbol__code_a8dd79cc2a20dc7bf2788fd6416003891_1a8dd79cc2a20dc7bf2788fd6416003891" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>operator&lt;</name></member>
      <member refid="classeosio_1_1symbol__code_a679be838b5e39b806fa42577124a214a_1a679be838b5e39b806fa42577124a214a" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>operator==</name></member>
      <member refid="classeosio_1_1symbol__code_a9c4430961f11cf7a207ac7d4c4827210_1a9c4430961f11cf7a207ac7d4c4827210" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>raw</name></member>
      <member refid="classeosio_1_1symbol__code_a9d8538c2ff41df391b45cfb6190a1ed4_1a9d8538c2ff41df391b45cfb6190a1ed4" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>symbol_code</name></member>
      <member refid="classeosio_1_1symbol__code_a5a95bedec99aff1d70a782b365bc28d0_1a5a95bedec99aff1d70a782b365bc28d0" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>symbol_code</name></member>
      <member refid="classeosio_1_1symbol__code_afba617179edadad41667b707176943fc_1afba617179edadad41667b707176943fc" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>symbol_code</name></member>
      <member refid="classeosio_1_1symbol__code_a075d0d69307bd9180b147a809f07bad5_1a075d0d69307bd9180b147a809f07bad5" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>to_string</name></member>
      <member refid="classeosio_1_1symbol__code_1ac9f8aec29c30e987ececc9e31dcae1e9" prot="private" virt="non-virtual"><scope>eosio::symbol_code</scope><name>value</name></member>
      <member refid="classeosio_1_1symbol__code_a9f6752ffa0fd8b10d2531b18978aeb9e_1a9f6752ffa0fd8b10d2531b18978aeb9e" prot="public" virt="non-virtual"><scope>eosio::symbol_code</scope><name>write_as_string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
