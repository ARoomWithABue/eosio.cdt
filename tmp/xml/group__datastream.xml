<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="group__datastream" kind="group">
    <compoundname>datastream</compoundname>
    <title>Data Stream</title>
    <innerclass refid="classeosio_1_1datastream" prot="public">eosio::datastream</innerclass>
    <innerclass refid="classeosio_1_1datastream_3_01size__t_01_4" prot="public">eosio::datastream&lt; size_t &gt;</innerclass>
    <innernamespace refid="namespaceeosio_1_1__datastream__detail">eosio::_datastream_detail</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__datastream_1ga1e49e445971a761be9607c1a3eb85bde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const std::optional&lt; T &gt; &amp;opt)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::optional&lt; T &gt; &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Serialize an optional. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize an optional into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="230" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="274" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga9e230ddd4f3d8ff314410dc9832829fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, std::optional&lt; T &gt; &amp;opt)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::optional&lt; T &gt; &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
<para>Deserialize an optional. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize an optional from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="292" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="292" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga5413cb7eba4e557a70d93ffa9f39b725" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const eosio::symbol_code sym_code)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1symbol__code" kindref="compound">eosio::symbol_code</ref></type>
          <declname>sym_code</declname>
        </param>
        <briefdescription>
<para>Serialize a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="292" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="313" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga647b59d0f66be8cbb0bac116d7d14a9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, eosio::symbol_code &amp;sym_code)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="classeosio_1_1symbol__code" kindref="compound">eosio::symbol_code</ref> &amp;</type>
          <declname>sym_code</declname>
        </param>
        <briefdescription>
<para>Deserialize a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a <ref refid="classeosio_1_1symbol__code" kindref="compound">symbol_code</ref> from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="329" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="329" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga4f20e587315c1c625ec8c7092f9d8465" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const eosio::symbol sym)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="classeosio_1_1symbol" kindref="compound">eosio::symbol</ref></type>
          <declname>sym</declname>
        </param>
        <briefdescription>
<para>Serialize a symbol. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a symbol into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sym</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="329" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga015cd9edd44cc1af80641c39b4816f13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, eosio::symbol &amp;sym)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="classeosio_1_1symbol" kindref="compound">eosio::symbol</ref> &amp;</type>
          <declname>sym</declname>
        </param>
        <briefdescription>
<para>Deserialize a symbol. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a symbol from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="362" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="362" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga344108ff96bcee67d40711dacdd42845" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const ::eosio::ignore_wrapper&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const ::<ref refid="structeosio_1_1ignore__wrapper" kindref="compound">eosio::ignore_wrapper</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Serialize ignored_wrapper&lt;T&gt;&apos;s T value. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize an ignored_wrapper type into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="362" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga05879a71914d293c8a30b1a6710f8e51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const ::eosio::ignore&lt; T &gt; &amp;val)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const ::<ref refid="structeosio_1_1ignore" kindref="compound">eosio::ignore</ref>&lt; T &gt; &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Serialize an ignored type. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize an ignored type into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignore</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="362" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="394" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gafea0491fecd3df192a3f245e8105a026" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, ::eosio::ignore&lt; T &gt;)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>::<ref refid="structeosio_1_1ignore" kindref="compound">eosio::ignore</ref>&lt; T &gt;</type>
        </param>
        <briefdescription>
<para>Deserialize an ignored type. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize an ignored type from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignored</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="408" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="408" bodyend="410"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gaeb6280d5e7942fcf839024442bc5c814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const capi_public_key pubkey)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const <ref refid="structcapi__public__key" kindref="compound">capi_public_key</ref></type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
<para>Serialize a <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref> into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkey</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="408" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga6f1b392200e9452c7f410ffd8fdfafe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, capi_public_key &amp;pubkey)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type><ref refid="structcapi__public__key" kindref="compound">capi_public_key</ref> &amp;</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
<para>Deserialize a <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a <ref refid="structeosio_1_1public__key" kindref="compound">public_key</ref> from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pubkey</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="437" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gaed3bc5bd372251b9cb90aff4cf85be5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const key256 &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const key256 &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Serialize a key256. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a key256 into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="437" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga74974be2214a4e50e463ae866f9297d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, key256 &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>key256 &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Deserialize a key256. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a key256 from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="467" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga7875cabe436fe6756c4b30eec326fe16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const bool &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Serialize a bool into a stream. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a bool into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="467" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="482" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga860a2cac0f4f00dacdade421c303ea9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, bool &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Deserialize a bool. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a bool from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="496" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="496" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga69731c7e836d6521c2aa7d67ad1dbc4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const capi_checksum256 &amp;d)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const capi_checksum256 &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Serialize a checksum256. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a checksum256 into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="496" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="513" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gaf18798375dd9ed43bea5888101883b9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, capi_checksum256 &amp;d)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>capi_checksum256 &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Deserialize a checksum256. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a checksum256 from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="528" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="528" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gab1dffa510122bd62ce3975e7b302c2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::string &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a string. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a string into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="543" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="543" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gaa02846796253d9db1064e43fadbecb8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::string &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a string. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a string from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="560" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="560" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga86c994b49d0af580c72f4d966baca75b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::array&lt; T, N &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a fixed size array. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a fixed size array into a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="582" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="582" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga60d3eb6bab6da17bd2986a051126d471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::array&lt; T, N &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::array&lt; T, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a fixed size array. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a fixed size array from a stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="601" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="601" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gac4ea18eb72ec93e5d06fff5a83623581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; _datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, T)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
<para>Deserialize a a pointer. </para>        </briefdescription>
        <detaileddescription>
<para>Pointer should not be serialized, so this function will always throws an error</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
<simplesect kind="post"><para>Throw an exception if it is a pointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="649" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga0c8758a01d2cdcd99922c268f2f4e4e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;!_datastream_detail::is_primitive&lt; T &gt;() &amp;&amp;!_datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream &amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const T(&amp;v)[N])</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Serialize a fixed size array of non-primitive and non-pointer type. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a fixed size array of non-primitive type.</para><para>Serialize a fixed size array of non-primitive and non-pointer type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream</para></simplesect>
Serialize a fixed size array of non-primitive type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="667" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="667" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga9ddfcc1002e9cd4c267ca0986753c686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>std::enable_if_t&lt;!_datastream_detail::is_primitive&lt; T &gt;() &amp;&amp;!_datastream_detail::is_pointer&lt; T &gt;()&gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream &amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, T(&amp;v)[N])</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Deserialize a fixed size array of non-primitive and non-pointer type. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a fixed size array of non-primitive type.</para><para>Deserialize a fixed size array of non-primitive and non-pointer type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream</para></simplesect>
Deserialize a fixed size array of non-primitive type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of the array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="706" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="706" bodyend="713"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga5cb28ef1142e7ec5ba5c6672265efd47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::vector&lt; char &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a vector of char. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a vector of char</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="746" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="746" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga53f4e770b9b3c9f1e92c2fa3fa0ec73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a vector. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a vector</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="763" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="763" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gad202e8fcf8f49970c1710410c6059cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::vector&lt; char &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::vector&lt; char &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a vector of char. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a vector of char</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="780" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="780" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gaedee239cff148b596f19a3c2c6c1adf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a vector. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a vector</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the object contained in the vector </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="799" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="799" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gaf98424a2563d883b3883a14692aa195a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="809" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="809" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gae2a202ccccf405468ad654676bb41d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="818" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="818" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga0bb2cdf062825f96551ba663f3d74e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Serialize a map. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a map</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="842" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="842" bodyend="848"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga63b7d3e0c99e4f049574fd366a1c528a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Deserialize a map. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a map</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="862" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="862" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gab7049fdaa7895e6c31a482deba846434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const boost::container::flat_set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const boost::container::flat_set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="876" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="876" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga5f545f70b39155d1cd1da85f0e00b742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, boost::container::flat_set&lt; T &gt; &amp;s)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>boost::container::flat_set&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="886" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="886" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga85b47a27bb41a2854d2b8daea9e7b9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const boost::container::flat_map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const boost::container::flat_map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Serialize a flat map. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a flat map</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the flat map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the flat map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="912" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="912" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga3b973878181cef2bdad7139958bd6ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, boost::container::flat_map&lt; K, V &gt; &amp;m)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>boost::container::flat_map&lt; K, V &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Deserialize a flat map. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a flat map</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>K</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the key contained in the flat map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the value contained in the flat map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="932" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="932" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga124a00ba4d603044ef25be84a9fade48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Serialize a tuple. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a tuple</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the objects contained in the tuple </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="955" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="955" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gac2e5487f43a496d7c263071e2502b986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Deserialize a tuple. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a tuple</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the objects contained in the tuple </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="973" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="973" bodyend="978"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga59511f8552dbf4a2aced270041c17f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_class&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream &amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(DataStream &amp;ds, const T &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Serialize a class. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a primitive type.</para><para>Serialize a class</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of class </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream</para></simplesect>
Serialize a primitive type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the primitive type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="991" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="991" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga7d64e2f48bca13601cf6606934e6e8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DataStream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>std::enable_if_t&lt; std::is_class&lt; T &gt;::value &gt; *</type>
            <defval>nullptr</defval>
          </param>
        </templateparamlist>
        <type>DataStream &amp;</type>
        <definition>DataStream &amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(DataStream &amp;ds, T &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>DataStream &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Deserialize a class. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a primitive type.</para><para>Deserialize a class</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of class </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream</para></simplesect>
Deserialize a primitive type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>DataStream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the primitive type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>DataStream&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1009" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1009" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga2ffaa5bd18836b7d40db601fb20965bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eosio::unpack</definition>
        <argsstring>(const char *buffer, size_t len)</argsstring>
        <name>unpack</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Unpack data inside a fixed size buffer as T. </para>        </briefdescription>
        <detaileddescription>
<para>Unpack data inside a fixed size buffer as T</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the unpacked data </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- Length of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The unpacked data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1058" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1058" bodyend="1063"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga666b4d583161e4db595e31565fbb6a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T eosio::unpack</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;bytes)</argsstring>
        <name>unpack</name>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Unpack data inside a variable size buffer as T. </para>        </briefdescription>
        <detaileddescription>
<para>Unpack data inside a variable size buffer as T</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the unpacked data </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T - The unpacked data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1074" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1074" bodyend="1076"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga30aa7d1c92792afc7f78af37372d68b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t eosio::pack_size</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>pack_size</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get the size of the packed data. </para>        </briefdescription>
        <detaileddescription>
<para>Get the size of the packed data</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the data to be packed </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data to be packed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size_t - Size of the packed data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1087" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1087" bodyend="1091"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga16e657110c5a8e1ac34056bc473460a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt;char&gt; eosio::pack</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>pack</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Get packed data. </para>        </briefdescription>
        <detaileddescription>
<para>Get packed data</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of the data to be packed </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data to be packed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bytes - The packed data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1102" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1102" bodyend="1109"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gac006ab398b288a0582a2a59b991bf37c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const capi_checksum160 &amp;cs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const capi_checksum160 &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Serializea capi_checksum160 type. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a capi_checksum160 type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1102" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1121" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga2cbcd06b5aae0e8ffd8b1550b0f39983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, capi_checksum160 &amp;cs)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>capi_checksum160 &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Deserialize a capi_checksum160 type. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a capi_checksum160 type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1136" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1136" bodyend="1139"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1gafd1c5d3fad33115c2ba6a65f8f4b5792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&lt;&lt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, const capi_checksum512 &amp;cs)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>const capi_checksum512 &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Serialize a capi_checksum512 type. </para>        </briefdescription>
        <detaileddescription>
<para>Serialize a capi_checksum512 type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>- The value to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1136" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1151" bodyend="1154"/>
      </memberdef>
      <memberdef kind="function" id="group__datastream_1ga14d1988dcb3235cf059d90c01a2b7d74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
        </templateparamlist>
        <type>datastream&lt; Stream &gt; &amp;</type>
        <definition>datastream&lt;Stream&gt;&amp; eosio::operator&gt;&gt;</definition>
        <argsstring>(datastream&lt; Stream &gt; &amp;ds, capi_checksum512 &amp;cs)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>datastream&lt; Stream &gt; &amp;</type>
          <declname>ds</declname>
        </param>
        <param>
          <type>capi_checksum512 &amp;</type>
          <declname>cs</declname>
        </param>
        <briefdescription>
<para>Deserialize a capi_checksum512 type. </para>        </briefdescription>
        <detaileddescription>
<para>Deserialize a capi_checksum512 type</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ds</parametername>
</parameternamelist>
<parameterdescription>
<para>- The stream to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>- The destination for deserialized value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of datastream buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>datastream&lt;Stream&gt;&amp; - Reference to the datastream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/datastream.hpp" line="1166" column="1" bodyfile="libraries/eosiolib/datastream.hpp" bodystart="1166" bodyend="1169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines data stream for reading and writing data in the form of bytes. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
