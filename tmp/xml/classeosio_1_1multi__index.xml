<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classeosio_1_1multi__index" kind="class" language="C++" prot="public">
    <compoundname>eosio::multi_index</compoundname>
    <includes refid="multi__index_8hpp" local="no">multi_index.hpp</includes>
    <innerclass refid="structeosio_1_1multi__index_1_1const__iterator" prot="public">eosio::multi_index::const_iterator</innerclass>
    <innerclass refid="structeosio_1_1multi__index_1_1index" prot="private">eosio::multi_index::index</innerclass>
    <innerclass refid="structeosio_1_1multi__index_1_1intc" prot="private">eosio::multi_index::intc</innerclass>
    <innerclass refid="structeosio_1_1multi__index_1_1item" prot="private">eosio::multi_index::item</innerclass>
    <innerclass refid="structeosio_1_1multi__index_1_1item__ptr" prot="private">eosio::multi_index::item_ptr</innerclass>
    <templateparamlist>
      <param>
        <type><ref refid="structeosio_1_1name_a1d269720fd7434429216833187173656_1a1d269720fd7434429216833187173656" kindref="member">name::raw</ref></type>
        <declname>TableName</declname>
        <defname>TableName</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>typename...</type>
        <declname>Indices</declname>
        <defname>Indices</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classeosio_1_1multi__index_1a840b92a700679f8a9e10abb7096f9a04" prot="private" static="no" strong="no">
        <type>uint64_t</type>
        <name>next_primary_key_tags</name>
        <enumvalue id="classeosio_1_1multi__index_1a840b92a700679f8a9e10abb7096f9a04af30e520a26372d7754c175fedbbbcb1c" prot="private">
          <name>no_available_primary_key</name>
          <initializer>= static_cast&lt;uint64_t&gt;(-2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classeosio_1_1multi__index_1a840b92a700679f8a9e10abb7096f9a04a60a92fb56cf888900303470b503c2317" prot="private">
          <name>unset_next_primary_key</name>
          <initializer>= static_cast&lt;uint64_t&gt;(-1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="267" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="267" bodyend="270"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classeosio_1_1multi__index_ab46b850d4d0d3da39cd96e77ec10c51e_1ab46b850d4d0d3da39cd96e77ec10c51e" prot="public" static="no">
        <type>std::reverse_iterator&lt; <ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref> &gt;</type>
        <definition>typedef std::reverse_iterator&lt;const_iterator&gt; eosio::multi_index&lt; TableName, T, Indices &gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
<para>struct <ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">multi_index::const_iterator</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="804" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="804" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classeosio_1_1multi__index_1ae5c7ac234346753de6ff21acf3816caf" prot="private" static="yes" mutable="no">
        <type>constexpr size_t</type>
        <definition>constexpr size_t eosio::multi_index&lt; TableName, T, Indices &gt;::max_stack_buffer_size</definition>
        <argsstring></argsstring>
        <name>max_stack_buffer_size</name>
        <initializer>= 512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="258" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classeosio_1_1multi__index_1a170b18041c86014bf85de0e6392b7b94" prot="private" static="no" mutable="no">
        <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
        <definition>name eosio::multi_index&lt; TableName, T, Indices &gt;::_code</definition>
        <argsstring></argsstring>
        <name>_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="262" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeosio_1_1multi__index_1a58bc2f0bbda3c312d2c3799946f6ff2b" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t eosio::multi_index&lt; TableName, T, Indices &gt;::_scope</definition>
        <argsstring></argsstring>
        <name>_scope</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="263" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeosio_1_1multi__index_1a24a34937df2dd8179ae93f4177044822" prot="private" static="no" mutable="yes">
        <type>uint64_t</type>
        <definition>uint64_t eosio::multi_index&lt; TableName, T, Indices &gt;::_next_primary_key</definition>
        <argsstring></argsstring>
        <name>_next_primary_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="265" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeosio_1_1multi__index_1a148b464cd18d933799b0c06dd2f5297f" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; item_ptr &gt;</type>
        <definition>std::vector&lt;item_ptr&gt; eosio::multi_index&lt; TableName, T, Indices &gt;::_items_vector</definition>
        <argsstring></argsstring>
        <name>_items_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="295" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeosio_1_1multi__index_1a6c0338041215c04bbddea4e365c46947" prot="private" static="no" mutable="no">
        <type>decltype(multi_index::transform_indices()) typedef</type>
        <definition>decltype( multi_index::transform_indices() ) typedef eosio::multi_index&lt; TableName, T, Indices &gt;::indices_type</definition>
        <argsstring></argsstring>
        <name>indices_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="573" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classeosio_1_1multi__index_1a4ffdf846dc2640c6b50fe88a49197219" prot="private" static="no" mutable="no">
        <type>indices_type</type>
        <definition>indices_type eosio::multi_index&lt; TableName, T, Indices &gt;::_indices</definition>
        <argsstring></argsstring>
        <name>_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="575" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="575" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classeosio_1_1multi__index_1ad36bc5a01892a68153cbcf63645ff37e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>static constexpr bool eosio::multi_index&lt; TableName, T, Indices &gt;::validate_table_name</definition>
        <argsstring>(name n)</argsstring>
        <name>validate_table_name</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="253" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_1a62970d54716d15e2aa5a87a7f48dd535" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>static constexpr auto eosio::multi_index&lt; TableName, T, Indices &gt;::transform_indices</definition>
        <argsstring>()</argsstring>
        <name>transform_indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="551" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="551" bodyend="571"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classeosio_1_1multi__index_1a86077fdc3c4f30857a46f5b3cff8f5bd" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const item &amp;</type>
        <definition>const item&amp; eosio::multi_index&lt; TableName, T, Indices &gt;::load_object_by_primary_iterator</definition>
        <argsstring>(int32_t itr) const</argsstring>
        <name>load_object_by_primary_iterator</name>
        <param>
          <type>int32_t</type>
          <declname>itr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="577" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="577" bodyend="619"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classeosio_1_1multi__index_aa081f69f6fa288869d1d5881f0be04dd_1aa081f69f6fa288869d1d5881f0be04dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>eosio::multi_index&lt; TableName, T, Indices &gt;::multi_index</definition>
        <argsstring>(name code, uint64_t scope)</argsstring>
        <name>multi_index</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>scope</declname>
        </param>
        <briefdescription>
<para>load_object_by_primary_iterator </para>        </briefdescription>
        <detaileddescription>
<para>Constructs an instance of a Multi-Index table. Constructs an instance of a Multi-Index table.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>- Account that owns table </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scope</parametername>
</parameternamelist>
<parameterdescription>
<para>- Scope identifier within the code hierarchy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>code and scope member properties are initialized </para></simplesect>
<simplesect kind="post"><para>each secondary index table initialized </para></simplesect>
<simplesect kind="post"><para>Secondary indices are updated to refer to the newly added object. If the secondary index tables do not exist, they are created. </para></simplesect>
<simplesect kind="post"><para>The payer is charged for the storage usage of the new object and, if the table (and secondary index tables) must be created, for the overhead of the table creation.</para></simplesect>
Notes The <computeroutput><ref refid="classeosio_1_1multi__index" kindref="compound">eosio::multi_index</ref></computeroutput> template has template parameters <computeroutput>&lt;<ref refid="structeosio_1_1name_a1d269720fd7434429216833187173656_1a1d269720fd7434429216833187173656" kindref="member">name::raw</ref> TableName, typename T, typename... Indices&gt;</computeroutput>, where:<itemizedlist>
<listitem><para><computeroutput>TableName</computeroutput> is the name of the table, maximum 12 characters long, characters in the name from the set of lowercase letters, digits 1 to 5, and the &quot;.&quot; (period) character and is converted to a eosio::raw - which wraps uint64_t;</para></listitem><listitem><para><computeroutput>T</computeroutput> is the object type (i.e., row definition);</para></listitem><listitem><para><computeroutput>Indices</computeroutput> is a list of up to 16 secondary indices.</para></listitem><listitem><para>Each must be a default constructable class or struct</para></listitem><listitem><para>Each must have a function call operator that takes a const reference to the table object type and returns either a secondary key type or a reference to a secondary key type</para></listitem><listitem><para>It is recommended to use the <ref refid="structeosio_1_1const__mem__fun" kindref="compound">eosio::const_mem_fun</ref> template, which is a type alias to the boost::multi_index::const_mem_fun. See the documentation for the Boost <ref refid="structeosio_1_1const__mem__fun" kindref="compound">const_mem_fun</ref> key extractor for more details.</para></listitem></itemizedlist>
</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="669" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="669" bodyend="671"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a6ef0fb806ad6edf50b670a115fc3d5a1_1a6ef0fb806ad6edf50b670a115fc3d5a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
        <definition>name eosio::multi_index&lt; TableName, T, Indices &gt;::get_code</definition>
        <argsstring>() const</argsstring>
        <name>get_code</name>
        <briefdescription>
<para>Returns the <computeroutput>code</computeroutput> member property. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the <computeroutput>code</computeroutput> member property. <simplesect kind="return"><para>Account name of the Code that owns the Primary Table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(name(&quot;dan&quot;),<sp/>name(&quot;dan&quot;).value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(addresses.get_code()<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Codes<sp/>don&apos;t<sp/>match.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="706" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="706" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a0690e9e9a30254240fa0cb6bb12bebf3_1a0690e9e9a30254240fa0cb6bb12bebf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t eosio::multi_index&lt; TableName, T, Indices &gt;::get_scope</definition>
        <argsstring>() const</argsstring>
        <name>get_scope</name>
        <briefdescription>
<para>Returns the <computeroutput>scope</computeroutput> member property. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the <computeroutput>scope</computeroutput> member property. <simplesect kind="return"><para>Scope id of the Scope within the Code of the Current Receiver under which the desired Primary Table instance can be found.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(name(&quot;dan&quot;),<sp/>name(&quot;dan&quot;).value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(addresses.get_scope()<sp/>==<sp/>name(&quot;dan&quot;).value,<sp/>&quot;Lock<sp/>arf,<sp/>Scopes<sp/>don&apos;t<sp/>match&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="741" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="741" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a36ad6b1c1013b6f753660b334de96aef_1a36ad6b1c1013b6f753660b334de96aef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Returns an iterator pointing to the object_type with the lowest primary key value in the Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator pointing to the object_type with the lowest primary key value in the Multi-Index table. <simplesect kind="return"><para>An iterator pointing to the object_type with the lowest primary key value in the Multi-Index table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>==<sp/>addresses.cbegin(),<sp/>&quot;Lock<sp/>arf,<sp/>Only<sp/>address<sp/>is<sp/>not<sp/>at<sp/>front.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="849" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="849" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a060b08a9da300e3a4ab669b35f07c9bc_1a060b08a9da300e3a4ab669b35f07c9bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Returns an iterator pointing to the object_type with the lowest primary key value in the Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator pointing to the object_type with the lowest primary key value in the Multi-Index table. <simplesect kind="return"><para>An iterator pointing to the object_type with the lowest primary key value in the Multi-Index table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>==<sp/>addresses.begin(),<sp/>&quot;Lock<sp/>arf,<sp/>Only<sp/>address<sp/>is<sp/>not<sp/>at<sp/>front.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_ABI(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="896" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="896" bodyend="896"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_aece639944fa9031debbd984bbd42485a_1aece639944fa9031debbd984bbd42485a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Returns an iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table. <simplesect kind="return"><para>An iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>!=<sp/>addresses.cend(),<sp/>&quot;Lock<sp/>arf,<sp/>Address<sp/>for<sp/>account<sp/>doesn&apos;t<sp/>exist&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="941" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="941" bodyend="941"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a748fcb4d6a08962ad8a7c92da359e3d7_1a748fcb4d6a08962ad8a7c92da359e3d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Returns an iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table. <simplesect kind="return"><para>An iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>!=<sp/>addresses.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Address<sp/>for<sp/>account<sp/>doesn&apos;t<sp/>exist&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="986" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="986" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_abe296816f75cdb69e6698724e7b0c29d_1abe296816f75cdb69e6698724e7b0c29d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1multi__index_ab46b850d4d0d3da39cd96e77ec10c51e_1ab46b850d4d0d3da39cd96e77ec10c51e" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>Returns a reverse iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reverse iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table. <simplesect kind="return"><para>A reverse iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;brendan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Brendan&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Blumer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Hong<sp/>Kong&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;HK&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.crbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>Last<sp/>Record<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;brendan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>Second<sp/>Last<sp/>Record&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1041" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1041" bodyend="1041"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_acdc14cc71a43489507341d2709696e7d_1acdc14cc71a43489507341d2709696e7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1multi__index_ab46b850d4d0d3da39cd96e77ec10c51e_1ab46b850d4d0d3da39cd96e77ec10c51e" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Returns a reverse iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns a reverse iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table. <simplesect kind="return"><para>A reverse iterator pointing to the <computeroutput>object_type</computeroutput> with the highest primary key value in the Multi-Index table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;brendan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Brendan&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Blumer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Hong<sp/>Kong&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;HK&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.rbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>Last<sp/>Record<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;brendan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>Second<sp/>Last<sp/>Record&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1096" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1096" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a6ce680bcec3a391e0ad89a1cd1143231_1a6ce680bcec3a391e0ad89a1cd1143231" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1multi__index_ab46b850d4d0d3da39cd96e77ec10c51e_1ab46b850d4d0d3da39cd96e77ec10c51e" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <briefdescription>
<para>Returns an iterator pointing to the <computeroutput>object_type</computeroutput> with the lowest primary key value in the Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator pointing to the <computeroutput>object_type</computeroutput> with the lowest primary key value in the Multi-Index table. <simplesect kind="return"><para>An iterator pointing to the <computeroutput>object_type</computeroutput> with the lowest primary key value in the Multi-Index table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;brendan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Brendan&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Blumer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Hong<sp/>Kong&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;HK&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.crend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;brendan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>First<sp/>Record<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>Second<sp/>Record&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1152" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1152" bodyend="1152"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a659b2744975d0a54162c44fbcbc28115_1a659b2744975d0a54162c44fbcbc28115" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classeosio_1_1multi__index_ab46b850d4d0d3da39cd96e77ec10c51e_1ab46b850d4d0d3da39cd96e77ec10c51e" kindref="member">const_reverse_iterator</ref></type>
        <definition>const_reverse_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Returns an iterator pointing to the <computeroutput>object_type</computeroutput> with the lowest primary key value in the Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator pointing to the <computeroutput>object_type</computeroutput> with the lowest primary key value in the Multi-Index table. <simplesect kind="return"><para>An iterator pointing to the <computeroutput>object_type</computeroutput> with the lowest primary key value in the Multi-Index table.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;brendan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Brendan&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Blumer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Hong<sp/>Kong&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;HK&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.rend();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;brendan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>First<sp/>Record<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr--;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>Second<sp/>Record&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1208" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1208" bodyend="1208"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_aa642a184ce729f91bc70200ba2a55253_1aa642a184ce729f91bc70200ba2a55253" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::lower_bound</definition>
        <argsstring>(uint64_t primary) const</argsstring>
        <name>lower_bound</name>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Searches for the <computeroutput>object_type</computeroutput> with the lowest primary key that is greater than or equal to a given primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Searches for the <computeroutput>object_type</computeroutput> with the lowest primary key that is greater than or equal to a given primary key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Primary key that establishes the target value for the lower bound search.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the <computeroutput>object_type</computeroutput> that has the lowest primary key that is greater than or equal to <computeroutput>primary</computeroutput>. If an object could not be found, it will return the <computeroutput>end</computeroutput> iterator. If the table does not exist** it will return <computeroutput>-1</computeroutput>.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zip<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>by_zip()<sp/>const<sp/>{<sp/>return<sp/>zip;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address,<sp/>indexed_by&lt;<sp/>name(&quot;zip&quot;),<sp/>const_mem_fun&lt;address,<sp/>uint64_t,<sp/>&amp;address::by_zip&gt;<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93446;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;brendan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Brendan&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Blumer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Hong<sp/>Kong&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;HK&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93445;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zipnumb<sp/>=<sp/>93445;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>zip_index<sp/>=<sp/>addresses.get_index&lt;name(&quot;zip&quot;)&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>zip_index.lower_bound(zipnumb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;brendan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>First<sp/>Lower<sp/>Bound<sp/>Record<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>Second<sp/>Lower<sp/>Bound<sp/>Record&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>==<sp/>zip_index.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>End<sp/>of<sp/>Iterator&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1273" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1273" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a5a9f1b25fd64a2bdb163f97ca97eb371_1a5a9f1b25fd64a2bdb163f97ca97eb371" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::upper_bound</definition>
        <argsstring>(uint64_t primary) const</argsstring>
        <name>upper_bound</name>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Searches for the <computeroutput>object_type</computeroutput> with the highest primary key that is less than or equal to a given primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Searches for the <computeroutput>object_type</computeroutput> with the highest primary key that is less than or equal to a given primary key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Primary key that establishes the target value for the upper bound search</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator pointing to the <computeroutput>object_type</computeroutput> that has the highest primary key that is less than or equal to <computeroutput>primary</computeroutput>. If an object could not be found, it will return the <computeroutput>end</computeroutput> iterator. If the table does not exist** it will return <computeroutput>-1</computeroutput>.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zip<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>liked<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>by_zip()<sp/>const<sp/>{<sp/>return<sp/>zip;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address,<sp/>indexed_by&lt;<sp/>name(&quot;zip&quot;),<sp/>const_mem_fun&lt;address,<sp/>uint64_t,<sp/>&amp;address::by_zip&gt;<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93446;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;brendan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Brendan&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Blumer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Hong<sp/>Kong&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;HK&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93445;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zipnumb<sp/>=<sp/>93445;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>zip_index<sp/>=<sp/>addresses.get_index&lt;name(&quot;zip&quot;)&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>zip_index.upper_bound(zipnumb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>First<sp/>Upper<sp/>Bound<sp/>Record<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>==<sp/>zip_index.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>End<sp/>of<sp/>Iterator&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1342" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1342" bodyend="1347"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a1b2d26324eb34354f5db2abcf2d87853_1a1b2d26324eb34354f5db2abcf2d87853" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t eosio::multi_index&lt; TableName, T, Indices &gt;::available_primary_key</definition>
        <argsstring>() const</argsstring>
        <name>available_primary_key</name>
        <briefdescription>
<para>Returns an available primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an available primary key. <simplesect kind="return"><para>An available (unused) primary key value.</para></simplesect>
Notes: Intended to be used in tables in which the primary keys of the table are strictly intended to be auto-incrementing, and thus will never be set to custom values by the contract. Violating this expectation could result in the table appearing to be full due to inability to allocate an available primary key. Ideally this method would only be used to determine the appropriate primary key to use within new objects added to a table in which the primary keys of the table are strictly intended from the beginning to be autoincrementing and thus will not ever be set to custom arbitrary values by the contract. Violating this agreement could result in the table appearing full when in reality there is plenty of space left.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>key;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>key;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.key<sp/>=<sp/>addresses.available_primary_key();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1394" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1394" bodyend="1411"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a98fecc3166ebb3746ee810f7f7d9beac_1a98fecc3166ebb3746ee810f7f7d9beac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="structeosio_1_1name_a1d269720fd7434429216833187173656_1a1d269720fd7434429216833187173656" kindref="member">name::raw</ref></type>
            <declname>IndexName</declname>
            <defname>IndexName</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto eosio::multi_index&lt; TableName, T, Indices &gt;::get_index</definition>
        <argsstring>()</argsstring>
        <name>get_index</name>
        <briefdescription>
<para>Returns an appropriately typed Secondary Index. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an appropriately typed Secondary Index. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IndexName</parametername>
</parameternamelist>
<parameterdescription>
<para>- the ID of the desired secondary index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index of the appropriate type: Primitive 64-bit unsigned integer key (idx64), Primitive 128-bit unsigned integer key (idx128), 128-bit fixed-size lexicographical key (idx128), 256-bit fixed-size lexicographical key (idx256), Floating point key, Double precision floating point key, Long Double (quadruple) precision floating point key</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zip<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>by_zip()<sp/>const<sp/>{<sp/>return<sp/>zip;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address,<sp/>indexed_by&lt;<sp/>name(&quot;zip&quot;),<sp/>const_mem_fun&lt;address,<sp/>uint64_t,<sp/>&amp;address::by_zip&gt;<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/><sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93446;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zipnumb<sp/>=<sp/>93446;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>zip_index<sp/>=<sp/>addresses.get_index&lt;name(&quot;zip&quot;)&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>zip_index.find(zipnumb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>Record<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1464" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1464" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_ae6e01877b9862c8193df27f05c305f2c_1ae6e01877b9862c8193df27f05c305f2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="structeosio_1_1name_a1d269720fd7434429216833187173656_1a1d269720fd7434429216833187173656" kindref="member">name::raw</ref></type>
            <declname>IndexName</declname>
            <defname>IndexName</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto eosio::multi_index&lt; TableName, T, Indices &gt;::get_index</definition>
        <argsstring>() const</argsstring>
        <name>get_index</name>
        <briefdescription>
<para>Returns an appropriately typed Secondary Index. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an appropriately typed Secondary Index. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IndexName</parametername>
</parameternamelist>
<parameterdescription>
<para>- the ID of the desired secondary index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An index of the appropriate type: Primitive 64-bit unsigned integer key (idx64), Primitive 128-bit unsigned integer key (idx128), 128-bit fixed-size lexicographical key (idx128), 256-bit fixed-size lexicographical key (idx256), Floating point key, Double precision floating point key, Long Double (quadruple) precision floating point key</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zip<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>by_zip()<sp/>const<sp/>{<sp/>return<sp/>zip;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address,<sp/>indexed_by&lt;<sp/>name(&quot;zip&quot;),<sp/>const_mem_fun&lt;address,<sp/>uint64_t,<sp/>&amp;address::by_zip&gt;<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93446;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;brendan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Brendan&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Blumer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Hong<sp/>Kong&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;HK&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93445;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zipnumb<sp/>=<sp/>93445;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>zip_index<sp/>=<sp/>addresses.get_index&lt;name(&quot;zip&quot;)&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>zip_index.upper_bound(zipnumb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;account_name<sp/>==<sp/>name(&quot;dan&quot;),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>First<sp/>Upper<sp/>Bound<sp/>Record<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>==<sp/>zip_index.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Incorrect<sp/>End<sp/>of<sp/>Iterator&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1538" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1538" bodyend="1548"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_ad611e3ff51efdf038b934138d071cf83_1ad611e3ff51efdf038b934138d071cf83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::iterator_to</definition>
        <argsstring>(const T &amp;obj) const</argsstring>
        <name>iterator_to</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Returns an iterator to the given object in a Multi-Index table. </para>        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the given object in a Multi-Index table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>- A reference to the desired object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator to the given object</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>zip<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>by_zip()<sp/>const<sp/>{<sp/>return<sp/>zip;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address,<sp/>indexed_by&lt;<sp/>name(&quot;zip&quot;),<sp/>const_mem_fun&lt;address,<sp/>uint64_t,<sp/>&amp;address::by_zip&gt;<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93446;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(payer,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;brendan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Brendan&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Blumer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Hong<sp/>Kong&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;HK&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.zip<sp/>=<sp/>93445;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>user<sp/>=<sp/>addresses.get(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>address.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(iterator_to(user)<sp/>==<sp/>itr,<sp/>&quot;Lock<sp/>arf,<sp/>Invalid<sp/>iterator&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1608" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1608" bodyend="1612"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_ab64fbf4dd04be357ec0cbbf125a3da5e_1ab64fbf4dd04be357ec0cbbf125a3da5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::emplace</definition>
        <argsstring>(name payer, Lambda &amp;&amp;constructor)</argsstring>
        <name>emplace</name>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>Lambda &amp;&amp;</type>
          <declname>constructor</declname>
        </param>
        <briefdescription>
<para>Adds a new object (i.e., row) to the table. </para>        </briefdescription>
        <detaileddescription>
<para>Adds a new object (i.e., row) to the table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- Account name of the payer for the Storage usage of the new object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constructor</parametername>
</parameternamelist>
<parameterdescription>
<para>- Lambda function that does an in-place initialization of the object to be created in the table</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>A multi index table has been instantiated </para></simplesect>
<simplesect kind="post"><para>A new object is created in the Multi-Index table, with a unique primary key (as specified in the object). The object is serialized and written to the table. If the table does not exist, it is created. </para></simplesect>
<simplesect kind="post"><para>Secondary indices are updated to refer to the newly added object. If the secondary index tables do not exist, they are created. </para></simplesect>
<simplesect kind="post"><para>The payer is charged for the storage usage of the new object and, if the table (and secondary index tables) must be created, for the overhead of the table creation.</para></simplesect>
<simplesect kind="return"><para>A primary key iterator to the newly created object</para></simplesect>
Exception - The account is not authorized to write to the table.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1665" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1665" bodyend="1707"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a4b3556ef69c7faa917f185ae33a34442_1a4b3556ef69c7faa917f185ae33a34442" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::multi_index&lt; TableName, T, Indices &gt;::modify</definition>
        <argsstring>(const_iterator itr, name payer, Lambda &amp;&amp;updater)</argsstring>
        <name>modify</name>
        <param>
          <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
          <declname>itr</declname>
        </param>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>Lambda &amp;&amp;</type>
          <declname>updater</declname>
        </param>
        <briefdescription>
<para>Modifies an existing object in a table. </para>        </briefdescription>
        <detaileddescription>
<para>Modifies an existing object in a table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itr</parametername>
</parameternamelist>
<parameterdescription>
<para>- an iterator pointing to the object to be updated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- account name of the payer for the Storage usage of the updated row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updater</parametername>
</parameternamelist>
<parameterdescription>
<para>- lambda function that updates the target object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>itr points to an existing element </para></simplesect>
<simplesect kind="pre"><para>payer is a valid account that is authorized to execute the action and be billed for storage usage.</para></simplesect>
<simplesect kind="post"><para>The modified object is serialized, then replaces the existing object in the table. </para></simplesect>
<simplesect kind="post"><para>Secondary indices are updated; the primary key of the updated object is not changed. </para></simplesect>
<simplesect kind="post"><para>The payer is charged for the storage usage of the updated object. </para></simplesect>
<simplesect kind="post"><para>If payer is the same as the existing payer, payer only pays for the usage difference between existing and updated object (and is refunded if this difference is negative). </para></simplesect>
<simplesect kind="post"><para>If payer is different from the existing payer, the existing payer is refunded for the storage usage of the existing object.</para></simplesect>
Exceptions: If called with an invalid precondition, execution is aborted.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>!=<sp/>addresses.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Address<sp/>for<sp/>account<sp/>not<sp/>found&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.modify(<sp/>itr,<sp/>account<sp/>payer,<sp/>[&amp;](<sp/>auto&amp;<sp/>address<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;San<sp/>Luis<sp/>Obispo&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;CA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1771" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1771" bodyend="1775"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_ab44fb8b993970f1b3b7ac5f37cd2d2c9_1ab44fb8b993970f1b3b7ac5f37cd2d2c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void eosio::multi_index&lt; TableName, T, Indices &gt;::modify</definition>
        <argsstring>(const T &amp;obj, name payer, Lambda &amp;&amp;updater)</argsstring>
        <name>modify</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="structeosio_1_1name" kindref="compound">name</ref></type>
          <declname>payer</declname>
        </param>
        <param>
          <type>Lambda &amp;&amp;</type>
          <declname>updater</declname>
        </param>
        <briefdescription>
<para>Modifies an existing object in a table. </para>        </briefdescription>
        <detaileddescription>
<para>Modifies an existing object in a table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>- a reference to the object to be updated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>payer</parametername>
</parameternamelist>
<parameterdescription>
<para>- account name of the payer for the Storage usage of the updated row </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updater</parametername>
</parameternamelist>
<parameterdescription>
<para>- lambda function that updates the target object</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>obj is an existing object in the table </para></simplesect>
<simplesect kind="pre"><para>payer is a valid account that is authorized to execute the action and be billed for storage usage.</para></simplesect>
<simplesect kind="post"><para>The modified object is serialized, then replaces the existing object in the table. </para></simplesect>
<simplesect kind="post"><para>Secondary indices are updated; the primary key of the updated object is not changed. </para></simplesect>
<simplesect kind="post"><para>The payer is charged for the storage usage of the updated object. </para></simplesect>
<simplesect kind="post"><para>If payer is the same as the existing payer, payer only pays for the usage difference between existing and updated object (and is refunded if this difference is negative). </para></simplesect>
<simplesect kind="post"><para>If payer is different from the existing payer, the existing payer is refunded for the storage usage of the existing object.</para></simplesect>
Exceptions: If called with an invalid precondition, execution is aborted.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>!=<sp/>addresses.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Address<sp/>for<sp/>account<sp/>not<sp/>found&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.modify(<sp/>*itr,<sp/>payer,<sp/>[&amp;](<sp/>auto&amp;<sp/>address<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;San<sp/>Luis<sp/>Obispo&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;CA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr-&gt;city<sp/>==<sp/>&quot;San<sp/>Luis<sp/>Obispo&quot;,<sp/>&quot;Lock<sp/>arf,<sp/>Address<sp/>not<sp/>modified&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1840" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1840" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_af05dfe7b56cf37179f76632cf619f0d1_1af05dfe7b56cf37179f76632cf619f0d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; eosio::multi_index&lt; TableName, T, Indices &gt;::get</definition>
        <argsstring>(uint64_t primary, const char *error_msg=&quot;unable to find key&quot;) const</argsstring>
        <name>get</name>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>error_msg</declname>
          <defval>&quot;unable to <ref refid="classeosio_1_1multi__index_a40a65cdfcc298b85e0e4ddf4c3581c1c_1a40a65cdfcc298b85e0e4ddf4c3581c1c" kindref="member">find</ref> key&quot;</defval>
        </param>
        <briefdescription>
<para>Retrieves an existing object from a table using its primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Retrieves an existing object from a table using its primary key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Primary key value of the object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A constant reference to the object containing the specified primary key.</para></simplesect>
Exception - No object matches the given key</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>user<sp/>=<sp/>addresses.get(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(user.first_name<sp/>==<sp/>&quot;Daniel&quot;,<sp/>&quot;Lock<sp/>arf,<sp/>Couldn&apos;t<sp/>get<sp/>him.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1941" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1941" bodyend="1945"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a40a65cdfcc298b85e0e4ddf4c3581c1c_1a40a65cdfcc298b85e0e4ddf4c3581c1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::find</definition>
        <argsstring>(uint64_t primary) const</argsstring>
        <name>find</name>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <briefdescription>
<para>Search for an existing object in a table using its primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Search for an existing object in a table using its primary key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Primary key value of the object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator to the found object which has a primary key equal to <computeroutput>primary</computeroutput> OR the <computeroutput>end</computeroutput> iterator of the referenced table if an object with primary key <computeroutput>primary</computeroutput> is not found.</para></simplesect>
Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>!=<sp/>addresses.end(),<sp/>&quot;Everting<sp/>Lock<sp/>arf,<sp/>Couldn&apos;t<sp/>get<sp/>him.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="1991" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="1991" bodyend="2003"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_a8a65dee974002fd6324e72a0a978fddf_1a8a65dee974002fd6324e72a0a978fddf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::require_find</definition>
        <argsstring>(uint64_t primary, const char *error_msg=&quot;unable to find key&quot;) const</argsstring>
        <name>require_find</name>
        <param>
          <type>uint64_t</type>
          <declname>primary</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>error_msg</declname>
          <defval>&quot;unable to <ref refid="classeosio_1_1multi__index_a40a65cdfcc298b85e0e4ddf4c3581c1c_1a40a65cdfcc298b85e0e4ddf4c3581c1c" kindref="member">find</ref> key&quot;</defval>
        </param>
        <briefdescription>
<para>Search for an existing object in a table using its primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Search for an existing object in a table using its primary key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>primary</parametername>
</parameternamelist>
<parameterdescription>
<para>- Primary key value of the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error_msg</parametername>
</parameternamelist>
<parameterdescription>
<para>- error message if an object with primary key <computeroutput>primary</computeroutput> is not found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An iterator to the found object which has a primary key equal to <computeroutput>primary</computeroutput> OR throws an exception if an object with primary key <computeroutput>primary</computeroutput> is not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="2014" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="2014" bodyend="2026"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_ad28ac8d91e9af22cbbc12962a805d253_1ad28ac8d91e9af22cbbc12962a805d253" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>const_iterator eosio::multi_index&lt; TableName, T, Indices &gt;::erase</definition>
        <argsstring>(const_iterator itr)</argsstring>
        <name>erase</name>
        <param>
          <type><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></type>
          <declname>itr</declname>
        </param>
        <briefdescription>
<para>Remove an existing object from a table using its primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Remove an existing object from a table using its primary key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>itr</parametername>
</parameternamelist>
<parameterdescription>
<para>- An iterator pointing to the object to be removed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>itr points to an existing element </para></simplesect>
<simplesect kind="post"><para>The object is removed from the table and all associated storage is reclaimed. </para></simplesect>
<simplesect kind="post"><para>Secondary indices associated with the table are updated. </para></simplesect>
<simplesect kind="post"><para>The existing payer for storage usage of the object is refunded for the table and secondary indices usage of the removed object, and if the table and indices are removed, for the associated overhead.</para></simplesect>
<simplesect kind="return"><para>For the signature with <computeroutput><ref refid="structeosio_1_1multi__index_1_1const__iterator" kindref="compound">const_iterator</ref></computeroutput>, returns a pointer to the object following the removed object.</para></simplesect>
Exceptions: The object to be removed is not in the table. The action is not authorized to modify the table. The given iterator is invalid.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>!=<sp/>addresses.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Address<sp/>for<sp/>account<sp/>not<sp/>found&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.erase(<sp/>itr<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>!=<sp/>addresses.end(),<sp/>&quot;Everting<sp/>lock<sp/>arf,<sp/>Address<sp/>not<sp/>erased<sp/>properly&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_ABI(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="2085" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="2085" bodyend="2094"/>
      </memberdef>
      <memberdef kind="function" id="classeosio_1_1multi__index_ac5f84064eacb4265ad44f15cecebb4be_1ac5f84064eacb4265ad44f15cecebb4be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eosio::multi_index&lt; TableName, T, Indices &gt;::erase</definition>
        <argsstring>(const T &amp;obj)</argsstring>
        <name>erase</name>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Remove an existing object from a table using its primary key. </para>        </briefdescription>
        <detaileddescription>
<para>Remove an existing object from a table using its primary key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>- Object to be removed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="pre"><para>obj is an existing object in the table </para></simplesect>
<simplesect kind="post"><para>The object is removed from the table and all associated storage is reclaimed. </para></simplesect>
<simplesect kind="post"><para>Secondary indices associated with the table are updated. </para></simplesect>
<simplesect kind="post"><para>The existing payer for storage usage of the object is refunded for the table and secondary indices usage of the removed object, and if the table and indices are removed, for the associated overhead.</para></simplesect>
Exceptions: The object to be removed is not in the table. The action is not authorized to modify the table. The given iterator is invalid.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;eosiolib/eosio.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>eosio;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>std;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>addressbook:<sp/>contract<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>address<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>account_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>first_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>last_name;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>street;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>city;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>string<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>primary_key()<sp/>const<sp/>{<sp/>return<sp/>account_name;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>addressbook(name<sp/>receiver,<sp/>name<sp/>code,<sp/>datastream&lt;const<sp/>char*&gt;<sp/>ds):contract(receiver,<sp/>code,<sp/>ds)<sp/>{}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typedef<sp/>eosio::multi_index&lt;<sp/>name(&quot;address&quot;),<sp/>address<sp/>&gt;<sp/>address_index;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>myaction()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>address_index<sp/>addresses(_self,<sp/>_self.value);<sp/>//<sp/>code,<sp/>scope</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>add<sp/>to<sp/>table,<sp/>first<sp/>argument<sp/>is<sp/>account<sp/>to<sp/>bill<sp/>for<sp/>storage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.emplace(_self,<sp/>[&amp;](auto&amp;<sp/>address)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.account_name<sp/>=<sp/>name(&quot;dan&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.first_name<sp/>=<sp/>&quot;Daniel&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.last_name<sp/>=<sp/>&quot;Larimer&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.street<sp/>=<sp/>&quot;1<sp/>EOS<sp/>Way&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.city<sp/>=<sp/>&quot;Blacksburg&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address.state<sp/>=<sp/>&quot;VA&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>!=<sp/>addresses.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Record<sp/>is<sp/>not<sp/>found&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addresses.erase(*itr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itr<sp/>=<sp/>addresses.find(name(&quot;dan&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eosio_assert(itr<sp/>==<sp/>addresses.end(),<sp/>&quot;Lock<sp/>arf,<sp/>Record<sp/>is<sp/>not<sp/>deleted&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">EOSIO_DISPATCH(<sp/>addressbook,<sp/>(myaction)<sp/>)</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/eosiolib/multi_index.hpp" line="2152" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="2152" bodyend="2181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libraries/eosiolib/multi_index.hpp" line="248" column="1" bodyfile="libraries/eosiolib/multi_index.hpp" bodystart="247" bodyend="2183"/>
    <listofallmembers>
      <member refid="classeosio_1_1multi__index_1a170b18041c86014bf85de0e6392b7b94" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>_code</name></member>
      <member refid="classeosio_1_1multi__index_1a4ffdf846dc2640c6b50fe88a49197219" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>_indices</name></member>
      <member refid="classeosio_1_1multi__index_1a148b464cd18d933799b0c06dd2f5297f" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>_items_vector</name></member>
      <member refid="classeosio_1_1multi__index_1a24a34937df2dd8179ae93f4177044822" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>_next_primary_key</name></member>
      <member refid="classeosio_1_1multi__index_1a58bc2f0bbda3c312d2c3799946f6ff2b" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>_scope</name></member>
      <member refid="classeosio_1_1multi__index_a1b2d26324eb34354f5db2abcf2d87853_1a1b2d26324eb34354f5db2abcf2d87853" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>available_primary_key</name></member>
      <member refid="classeosio_1_1multi__index_a060b08a9da300e3a4ab669b35f07c9bc_1a060b08a9da300e3a4ab669b35f07c9bc" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>begin</name></member>
      <member refid="classeosio_1_1multi__index_a36ad6b1c1013b6f753660b334de96aef_1a36ad6b1c1013b6f753660b334de96aef" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>cbegin</name></member>
      <member refid="classeosio_1_1multi__index_aece639944fa9031debbd984bbd42485a_1aece639944fa9031debbd984bbd42485a" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>cend</name></member>
      <member refid="classeosio_1_1multi__index_ab46b850d4d0d3da39cd96e77ec10c51e_1ab46b850d4d0d3da39cd96e77ec10c51e" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>const_reverse_iterator</name></member>
      <member refid="classeosio_1_1multi__index_abe296816f75cdb69e6698724e7b0c29d_1abe296816f75cdb69e6698724e7b0c29d" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>crbegin</name></member>
      <member refid="classeosio_1_1multi__index_a6ce680bcec3a391e0ad89a1cd1143231_1a6ce680bcec3a391e0ad89a1cd1143231" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>crend</name></member>
      <member refid="classeosio_1_1multi__index_ab64fbf4dd04be357ec0cbbf125a3da5e_1ab64fbf4dd04be357ec0cbbf125a3da5e" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>emplace</name></member>
      <member refid="classeosio_1_1multi__index_a748fcb4d6a08962ad8a7c92da359e3d7_1a748fcb4d6a08962ad8a7c92da359e3d7" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>end</name></member>
      <member refid="classeosio_1_1multi__index_ad28ac8d91e9af22cbbc12962a805d253_1ad28ac8d91e9af22cbbc12962a805d253" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>erase</name></member>
      <member refid="classeosio_1_1multi__index_ac5f84064eacb4265ad44f15cecebb4be_1ac5f84064eacb4265ad44f15cecebb4be" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>erase</name></member>
      <member refid="classeosio_1_1multi__index_a40a65cdfcc298b85e0e4ddf4c3581c1c_1a40a65cdfcc298b85e0e4ddf4c3581c1c" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>find</name></member>
      <member refid="classeosio_1_1multi__index_af05dfe7b56cf37179f76632cf619f0d1_1af05dfe7b56cf37179f76632cf619f0d1" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>get</name></member>
      <member refid="classeosio_1_1multi__index_a6ef0fb806ad6edf50b670a115fc3d5a1_1a6ef0fb806ad6edf50b670a115fc3d5a1" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>get_code</name></member>
      <member refid="classeosio_1_1multi__index_a98fecc3166ebb3746ee810f7f7d9beac_1a98fecc3166ebb3746ee810f7f7d9beac" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>get_index</name></member>
      <member refid="classeosio_1_1multi__index_ae6e01877b9862c8193df27f05c305f2c_1ae6e01877b9862c8193df27f05c305f2c" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>get_index</name></member>
      <member refid="classeosio_1_1multi__index_a0690e9e9a30254240fa0cb6bb12bebf3_1a0690e9e9a30254240fa0cb6bb12bebf3" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>get_scope</name></member>
      <member refid="classeosio_1_1multi__index_1a6c0338041215c04bbddea4e365c46947" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>indices_type</name></member>
      <member refid="classeosio_1_1multi__index_ad611e3ff51efdf038b934138d071cf83_1ad611e3ff51efdf038b934138d071cf83" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>iterator_to</name></member>
      <member refid="classeosio_1_1multi__index_1a86077fdc3c4f30857a46f5b3cff8f5bd" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>load_object_by_primary_iterator</name></member>
      <member refid="classeosio_1_1multi__index_aa642a184ce729f91bc70200ba2a55253_1aa642a184ce729f91bc70200ba2a55253" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>lower_bound</name></member>
      <member refid="classeosio_1_1multi__index_1ae5c7ac234346753de6ff21acf3816caf" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>max_stack_buffer_size</name></member>
      <member refid="classeosio_1_1multi__index_a4b3556ef69c7faa917f185ae33a34442_1a4b3556ef69c7faa917f185ae33a34442" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>modify</name></member>
      <member refid="classeosio_1_1multi__index_ab44fb8b993970f1b3b7ac5f37cd2d2c9_1ab44fb8b993970f1b3b7ac5f37cd2d2c9" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>modify</name></member>
      <member refid="classeosio_1_1multi__index_aa081f69f6fa288869d1d5881f0be04dd_1aa081f69f6fa288869d1d5881f0be04dd" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>multi_index</name></member>
      <member refid="classeosio_1_1multi__index_1a840b92a700679f8a9e10abb7096f9a04" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>next_primary_key_tags</name></member>
      <member refid="classeosio_1_1multi__index_1a840b92a700679f8a9e10abb7096f9a04af30e520a26372d7754c175fedbbbcb1c" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>no_available_primary_key</name></member>
      <member refid="classeosio_1_1multi__index_acdc14cc71a43489507341d2709696e7d_1acdc14cc71a43489507341d2709696e7d" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>rbegin</name></member>
      <member refid="classeosio_1_1multi__index_a659b2744975d0a54162c44fbcbc28115_1a659b2744975d0a54162c44fbcbc28115" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>rend</name></member>
      <member refid="classeosio_1_1multi__index_a8a65dee974002fd6324e72a0a978fddf_1a8a65dee974002fd6324e72a0a978fddf" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>require_find</name></member>
      <member refid="classeosio_1_1multi__index_1a62970d54716d15e2aa5a87a7f48dd535" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>transform_indices</name></member>
      <member refid="classeosio_1_1multi__index_1a840b92a700679f8a9e10abb7096f9a04a60a92fb56cf888900303470b503c2317" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>unset_next_primary_key</name></member>
      <member refid="classeosio_1_1multi__index_a5a9f1b25fd64a2bdb163f97ca97eb371_1a5a9f1b25fd64a2bdb163f97ca97eb371" prot="public" virt="non-virtual"><scope>eosio::multi_index</scope><name>upper_bound</name></member>
      <member refid="classeosio_1_1multi__index_1ad36bc5a01892a68153cbcf63645ff37e" prot="private" virt="non-virtual"><scope>eosio::multi_index</scope><name>validate_table_name</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
